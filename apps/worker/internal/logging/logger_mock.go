// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package logging

import (
	"context"
	"sync"
)

// Ensure, that LoggerMock does implement Logger.
// If this is not the case, regenerate this file with moq.
var _ Logger = &LoggerMock{}

// LoggerMock is a mock implementation of Logger.
//
//	func TestSomethingThatUsesLogger(t *testing.T) {
//
//		// make and configure a mocked Logger
//		mockedLogger := &LoggerMock{
//			DebugFunc: func(ctx context.Context, msg string, keysAndValues ...any)  {
//				panic("mock out the Debug method")
//			},
//			ErrorFunc: func(ctx context.Context, msg string, keysAndValues ...any)  {
//				panic("mock out the Error method")
//			},
//			InfoFunc: func(ctx context.Context, msg string, keysAndValues ...any)  {
//				panic("mock out the Info method")
//			},
//			WarnFunc: func(ctx context.Context, msg string, keysAndValues ...any)  {
//				panic("mock out the Warn method")
//			},
//		}
//
//		// use mockedLogger in code that requires Logger
//		// and then make assertions.
//
//	}
type LoggerMock struct {
	// DebugFunc mocks the Debug method.
	DebugFunc func(ctx context.Context, msg string, keysAndValues ...any)

	// ErrorFunc mocks the Error method.
	ErrorFunc func(ctx context.Context, msg string, keysAndValues ...any)

	// InfoFunc mocks the Info method.
	InfoFunc func(ctx context.Context, msg string, keysAndValues ...any)

	// WarnFunc mocks the Warn method.
	WarnFunc func(ctx context.Context, msg string, keysAndValues ...any)

	// calls tracks calls to the methods.
	calls struct {
		// Debug holds details about calls to the Debug method.
		Debug []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg string
			// KeysAndValues is the keysAndValues argument value.
			KeysAndValues []any
		}
		// Error holds details about calls to the Error method.
		Error []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg string
			// KeysAndValues is the keysAndValues argument value.
			KeysAndValues []any
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg string
			// KeysAndValues is the keysAndValues argument value.
			KeysAndValues []any
		}
		// Warn holds details about calls to the Warn method.
		Warn []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg string
			// KeysAndValues is the keysAndValues argument value.
			KeysAndValues []any
		}
	}
	lockDebug sync.RWMutex
	lockError sync.RWMutex
	lockInfo  sync.RWMutex
	lockWarn  sync.RWMutex
}

// Debug calls DebugFunc.
func (mock *LoggerMock) Debug(ctx context.Context, msg string, keysAndValues ...any) {
	if mock.DebugFunc == nil {
		panic("LoggerMock.DebugFunc: method is nil but Logger.Debug was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}{
		Ctx:           ctx,
		Msg:           msg,
		KeysAndValues: keysAndValues,
	}
	mock.lockDebug.Lock()
	mock.calls.Debug = append(mock.calls.Debug, callInfo)
	mock.lockDebug.Unlock()
	mock.DebugFunc(ctx, msg, keysAndValues...)
}

// DebugCalls gets all the calls that were made to Debug.
// Check the length with:
//
//	len(mockedLogger.DebugCalls())
func (mock *LoggerMock) DebugCalls() []struct {
	Ctx           context.Context
	Msg           string
	KeysAndValues []any
} {
	var calls []struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}
	mock.lockDebug.RLock()
	calls = mock.calls.Debug
	mock.lockDebug.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *LoggerMock) Error(ctx context.Context, msg string, keysAndValues ...any) {
	if mock.ErrorFunc == nil {
		panic("LoggerMock.ErrorFunc: method is nil but Logger.Error was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}{
		Ctx:           ctx,
		Msg:           msg,
		KeysAndValues: keysAndValues,
	}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	mock.ErrorFunc(ctx, msg, keysAndValues...)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//
//	len(mockedLogger.ErrorCalls())
func (mock *LoggerMock) ErrorCalls() []struct {
	Ctx           context.Context
	Msg           string
	KeysAndValues []any
} {
	var calls []struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *LoggerMock) Info(ctx context.Context, msg string, keysAndValues ...any) {
	if mock.InfoFunc == nil {
		panic("LoggerMock.InfoFunc: method is nil but Logger.Info was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}{
		Ctx:           ctx,
		Msg:           msg,
		KeysAndValues: keysAndValues,
	}
	mock.lockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	mock.lockInfo.Unlock()
	mock.InfoFunc(ctx, msg, keysAndValues...)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//
//	len(mockedLogger.InfoCalls())
func (mock *LoggerMock) InfoCalls() []struct {
	Ctx           context.Context
	Msg           string
	KeysAndValues []any
} {
	var calls []struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}
	mock.lockInfo.RLock()
	calls = mock.calls.Info
	mock.lockInfo.RUnlock()
	return calls
}

// Warn calls WarnFunc.
func (mock *LoggerMock) Warn(ctx context.Context, msg string, keysAndValues ...any) {
	if mock.WarnFunc == nil {
		panic("LoggerMock.WarnFunc: method is nil but Logger.Warn was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}{
		Ctx:           ctx,
		Msg:           msg,
		KeysAndValues: keysAndValues,
	}
	mock.lockWarn.Lock()
	mock.calls.Warn = append(mock.calls.Warn, callInfo)
	mock.lockWarn.Unlock()
	mock.WarnFunc(ctx, msg, keysAndValues...)
}

// WarnCalls gets all the calls that were made to Warn.
// Check the length with:
//
//	len(mockedLogger.WarnCalls())
func (mock *LoggerMock) WarnCalls() []struct {
	Ctx           context.Context
	Msg           string
	KeysAndValues []any
} {
	var calls []struct {
		Ctx           context.Context
		Msg           string
		KeysAndValues []any
	}
	mock.lockWarn.RLock()
	calls = mock.calls.Warn
	mock.lockWarn.RUnlock()
	return calls
}
