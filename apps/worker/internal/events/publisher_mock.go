// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package events

import (
	"context"
	"sync"
)

// Ensure, that PublisherMock does implement Publisher.
// If this is not the case, regenerate this file with moq.
var _ Publisher = &PublisherMock{}

// PublisherMock is a mock implementation of Publisher.
//
//	func TestSomethingThatUsesPublisher(t *testing.T) {
//
//		// make and configure a mocked Publisher
//		mockedPublisher := &PublisherMock{
//			PublishJobUpdateFunc: func(ctx context.Context, ev JobUpdateEvent) error {
//				panic("mock out the PublishJobUpdate method")
//			},
//		}
//
//		// use mockedPublisher in code that requires Publisher
//		// and then make assertions.
//
//	}
type PublisherMock struct {
	// PublishJobUpdateFunc mocks the PublishJobUpdate method.
	PublishJobUpdateFunc func(ctx context.Context, ev JobUpdateEvent) error

	// calls tracks calls to the methods.
	calls struct {
		// PublishJobUpdate holds details about calls to the PublishJobUpdate method.
		PublishJobUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ev is the ev argument value.
			Ev JobUpdateEvent
		}
	}
	lockPublishJobUpdate sync.RWMutex
}

// PublishJobUpdate calls PublishJobUpdateFunc.
func (mock *PublisherMock) PublishJobUpdate(ctx context.Context, ev JobUpdateEvent) error {
	if mock.PublishJobUpdateFunc == nil {
		panic("PublisherMock.PublishJobUpdateFunc: method is nil but Publisher.PublishJobUpdate was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ev  JobUpdateEvent
	}{
		Ctx: ctx,
		Ev:  ev,
	}
	mock.lockPublishJobUpdate.Lock()
	mock.calls.PublishJobUpdate = append(mock.calls.PublishJobUpdate, callInfo)
	mock.lockPublishJobUpdate.Unlock()
	return mock.PublishJobUpdateFunc(ctx, ev)
}

// PublishJobUpdateCalls gets all the calls that were made to PublishJobUpdate.
// Check the length with:
//
//	len(mockedPublisher.PublishJobUpdateCalls())
func (mock *PublisherMock) PublishJobUpdateCalls() []struct {
	Ctx context.Context
	Ev  JobUpdateEvent
} {
	var calls []struct {
		Ctx context.Context
		Ev  JobUpdateEvent
	}
	mock.lockPublishJobUpdate.RLock()
	calls = mock.calls.PublishJobUpdate
	mock.lockPublishJobUpdate.RUnlock()
	return calls
}
