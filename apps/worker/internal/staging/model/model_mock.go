// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package model

import (
	"context"
	"github.com/replicate/replicate-go"
	"sync"
)

// Ensure, that ModelInputBuilderMock does implement ModelInputBuilder.
// If this is not the case, regenerate this file with moq.
var _ ModelInputBuilder = &ModelInputBuilderMock{}

// ModelInputBuilderMock is a mock implementation of ModelInputBuilder.
//
//	func TestSomethingThatUsesModelInputBuilder(t *testing.T) {
//
//		// make and configure a mocked ModelInputBuilder
//		mockedModelInputBuilder := &ModelInputBuilderMock{
//			BuildInputFunc: func(ctx context.Context, req *ModelInputRequest) (replicate.PredictionInput, error) {
//				panic("mock out the BuildInput method")
//			},
//			ValidateFunc: func(req *ModelInputRequest) error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedModelInputBuilder in code that requires ModelInputBuilder
//		// and then make assertions.
//
//	}
type ModelInputBuilderMock struct {
	// BuildInputFunc mocks the BuildInput method.
	BuildInputFunc func(ctx context.Context, req *ModelInputRequest) (replicate.PredictionInput, error)

	// ValidateFunc mocks the Validate method.
	ValidateFunc func(req *ModelInputRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// BuildInput holds details about calls to the BuildInput method.
		BuildInput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *ModelInputRequest
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// Req is the req argument value.
			Req *ModelInputRequest
		}
	}
	lockBuildInput sync.RWMutex
	lockValidate   sync.RWMutex
}

// BuildInput calls BuildInputFunc.
func (mock *ModelInputBuilderMock) BuildInput(ctx context.Context, req *ModelInputRequest) (replicate.PredictionInput, error) {
	if mock.BuildInputFunc == nil {
		panic("ModelInputBuilderMock.BuildInputFunc: method is nil but ModelInputBuilder.BuildInput was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *ModelInputRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockBuildInput.Lock()
	mock.calls.BuildInput = append(mock.calls.BuildInput, callInfo)
	mock.lockBuildInput.Unlock()
	return mock.BuildInputFunc(ctx, req)
}

// BuildInputCalls gets all the calls that were made to BuildInput.
// Check the length with:
//
//	len(mockedModelInputBuilder.BuildInputCalls())
func (mock *ModelInputBuilderMock) BuildInputCalls() []struct {
	Ctx context.Context
	Req *ModelInputRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *ModelInputRequest
	}
	mock.lockBuildInput.RLock()
	calls = mock.calls.BuildInput
	mock.lockBuildInput.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *ModelInputBuilderMock) Validate(req *ModelInputRequest) error {
	if mock.ValidateFunc == nil {
		panic("ModelInputBuilderMock.ValidateFunc: method is nil but ModelInputBuilder.Validate was just called")
	}
	callInfo := struct {
		Req *ModelInputRequest
	}{
		Req: req,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(req)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedModelInputBuilder.ValidateCalls())
func (mock *ModelInputBuilderMock) ValidateCalls() []struct {
	Req *ModelInputRequest
} {
	var calls []struct {
		Req *ModelInputRequest
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
