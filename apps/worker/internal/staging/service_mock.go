// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package staging

import (
	"context"
	"io"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			DownloadFromS3Func: func(ctx context.Context, fileKey string) (io.ReadCloser, error) {
//				panic("mock out the DownloadFromS3 method")
//			},
//			StageImageFunc: func(ctx context.Context, req *StagingRequest) (string, error) {
//				panic("mock out the StageImage method")
//			},
//			UploadToS3Func: func(ctx context.Context, imageID string, content io.Reader, contentType string) (string, error) {
//				panic("mock out the UploadToS3 method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// DownloadFromS3Func mocks the DownloadFromS3 method.
	DownloadFromS3Func func(ctx context.Context, fileKey string) (io.ReadCloser, error)

	// StageImageFunc mocks the StageImage method.
	StageImageFunc func(ctx context.Context, req *StagingRequest) (string, error)

	// UploadToS3Func mocks the UploadToS3 method.
	UploadToS3Func func(ctx context.Context, imageID string, content io.Reader, contentType string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// DownloadFromS3 holds details about calls to the DownloadFromS3 method.
		DownloadFromS3 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileKey is the fileKey argument value.
			FileKey string
		}
		// StageImage holds details about calls to the StageImage method.
		StageImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *StagingRequest
		}
		// UploadToS3 holds details about calls to the UploadToS3 method.
		UploadToS3 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID string
			// Content is the content argument value.
			Content io.Reader
			// ContentType is the contentType argument value.
			ContentType string
		}
	}
	lockDownloadFromS3 sync.RWMutex
	lockStageImage     sync.RWMutex
	lockUploadToS3     sync.RWMutex
}

// DownloadFromS3 calls DownloadFromS3Func.
func (mock *ServiceMock) DownloadFromS3(ctx context.Context, fileKey string) (io.ReadCloser, error) {
	if mock.DownloadFromS3Func == nil {
		panic("ServiceMock.DownloadFromS3Func: method is nil but Service.DownloadFromS3 was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FileKey string
	}{
		Ctx:     ctx,
		FileKey: fileKey,
	}
	mock.lockDownloadFromS3.Lock()
	mock.calls.DownloadFromS3 = append(mock.calls.DownloadFromS3, callInfo)
	mock.lockDownloadFromS3.Unlock()
	return mock.DownloadFromS3Func(ctx, fileKey)
}

// DownloadFromS3Calls gets all the calls that were made to DownloadFromS3.
// Check the length with:
//
//	len(mockedService.DownloadFromS3Calls())
func (mock *ServiceMock) DownloadFromS3Calls() []struct {
	Ctx     context.Context
	FileKey string
} {
	var calls []struct {
		Ctx     context.Context
		FileKey string
	}
	mock.lockDownloadFromS3.RLock()
	calls = mock.calls.DownloadFromS3
	mock.lockDownloadFromS3.RUnlock()
	return calls
}

// StageImage calls StageImageFunc.
func (mock *ServiceMock) StageImage(ctx context.Context, req *StagingRequest) (string, error) {
	if mock.StageImageFunc == nil {
		panic("ServiceMock.StageImageFunc: method is nil but Service.StageImage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *StagingRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockStageImage.Lock()
	mock.calls.StageImage = append(mock.calls.StageImage, callInfo)
	mock.lockStageImage.Unlock()
	return mock.StageImageFunc(ctx, req)
}

// StageImageCalls gets all the calls that were made to StageImage.
// Check the length with:
//
//	len(mockedService.StageImageCalls())
func (mock *ServiceMock) StageImageCalls() []struct {
	Ctx context.Context
	Req *StagingRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *StagingRequest
	}
	mock.lockStageImage.RLock()
	calls = mock.calls.StageImage
	mock.lockStageImage.RUnlock()
	return calls
}

// UploadToS3 calls UploadToS3Func.
func (mock *ServiceMock) UploadToS3(ctx context.Context, imageID string, content io.Reader, contentType string) (string, error) {
	if mock.UploadToS3Func == nil {
		panic("ServiceMock.UploadToS3Func: method is nil but Service.UploadToS3 was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ImageID     string
		Content     io.Reader
		ContentType string
	}{
		Ctx:         ctx,
		ImageID:     imageID,
		Content:     content,
		ContentType: contentType,
	}
	mock.lockUploadToS3.Lock()
	mock.calls.UploadToS3 = append(mock.calls.UploadToS3, callInfo)
	mock.lockUploadToS3.Unlock()
	return mock.UploadToS3Func(ctx, imageID, content, contentType)
}

// UploadToS3Calls gets all the calls that were made to UploadToS3.
// Check the length with:
//
//	len(mockedService.UploadToS3Calls())
func (mock *ServiceMock) UploadToS3Calls() []struct {
	Ctx         context.Context
	ImageID     string
	Content     io.Reader
	ContentType string
} {
	var calls []struct {
		Ctx         context.Context
		ImageID     string
		Content     io.Reader
		ContentType string
	}
	mock.lockUploadToS3.RLock()
	calls = mock.calls.UploadToS3
	mock.lockUploadToS3.RUnlock()
	return calls
}
