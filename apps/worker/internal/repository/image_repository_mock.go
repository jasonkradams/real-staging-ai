// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"sync"
)

// Ensure, that ImageRepositoryMock does implement ImageRepository.
// If this is not the case, regenerate this file with moq.
var _ ImageRepository = &ImageRepositoryMock{}

// ImageRepositoryMock is a mock implementation of ImageRepository.
//
//	func TestSomethingThatUsesImageRepository(t *testing.T) {
//
//		// make and configure a mocked ImageRepository
//		mockedImageRepository := &ImageRepositoryMock{
//			SetErrorFunc: func(ctx context.Context, imageID string, errorMsg string) error {
//				panic("mock out the SetError method")
//			},
//			SetProcessingFunc: func(ctx context.Context, imageID string) error {
//				panic("mock out the SetProcessing method")
//			},
//			SetReadyFunc: func(ctx context.Context, imageID string, stagedURL string) error {
//				panic("mock out the SetReady method")
//			},
//		}
//
//		// use mockedImageRepository in code that requires ImageRepository
//		// and then make assertions.
//
//	}
type ImageRepositoryMock struct {
	// SetErrorFunc mocks the SetError method.
	SetErrorFunc func(ctx context.Context, imageID string, errorMsg string) error

	// SetProcessingFunc mocks the SetProcessing method.
	SetProcessingFunc func(ctx context.Context, imageID string) error

	// SetReadyFunc mocks the SetReady method.
	SetReadyFunc func(ctx context.Context, imageID string, stagedURL string) error

	// calls tracks calls to the methods.
	calls struct {
		// SetError holds details about calls to the SetError method.
		SetError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID string
			// ErrorMsg is the errorMsg argument value.
			ErrorMsg string
		}
		// SetProcessing holds details about calls to the SetProcessing method.
		SetProcessing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID string
		}
		// SetReady holds details about calls to the SetReady method.
		SetReady []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID string
			// StagedURL is the stagedURL argument value.
			StagedURL string
		}
	}
	lockSetError      sync.RWMutex
	lockSetProcessing sync.RWMutex
	lockSetReady      sync.RWMutex
}

// SetError calls SetErrorFunc.
func (mock *ImageRepositoryMock) SetError(ctx context.Context, imageID string, errorMsg string) error {
	if mock.SetErrorFunc == nil {
		panic("ImageRepositoryMock.SetErrorFunc: method is nil but ImageRepository.SetError was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ImageID  string
		ErrorMsg string
	}{
		Ctx:      ctx,
		ImageID:  imageID,
		ErrorMsg: errorMsg,
	}
	mock.lockSetError.Lock()
	mock.calls.SetError = append(mock.calls.SetError, callInfo)
	mock.lockSetError.Unlock()
	return mock.SetErrorFunc(ctx, imageID, errorMsg)
}

// SetErrorCalls gets all the calls that were made to SetError.
// Check the length with:
//
//	len(mockedImageRepository.SetErrorCalls())
func (mock *ImageRepositoryMock) SetErrorCalls() []struct {
	Ctx      context.Context
	ImageID  string
	ErrorMsg string
} {
	var calls []struct {
		Ctx      context.Context
		ImageID  string
		ErrorMsg string
	}
	mock.lockSetError.RLock()
	calls = mock.calls.SetError
	mock.lockSetError.RUnlock()
	return calls
}

// SetProcessing calls SetProcessingFunc.
func (mock *ImageRepositoryMock) SetProcessing(ctx context.Context, imageID string) error {
	if mock.SetProcessingFunc == nil {
		panic("ImageRepositoryMock.SetProcessingFunc: method is nil but ImageRepository.SetProcessing was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ImageID string
	}{
		Ctx:     ctx,
		ImageID: imageID,
	}
	mock.lockSetProcessing.Lock()
	mock.calls.SetProcessing = append(mock.calls.SetProcessing, callInfo)
	mock.lockSetProcessing.Unlock()
	return mock.SetProcessingFunc(ctx, imageID)
}

// SetProcessingCalls gets all the calls that were made to SetProcessing.
// Check the length with:
//
//	len(mockedImageRepository.SetProcessingCalls())
func (mock *ImageRepositoryMock) SetProcessingCalls() []struct {
	Ctx     context.Context
	ImageID string
} {
	var calls []struct {
		Ctx     context.Context
		ImageID string
	}
	mock.lockSetProcessing.RLock()
	calls = mock.calls.SetProcessing
	mock.lockSetProcessing.RUnlock()
	return calls
}

// SetReady calls SetReadyFunc.
func (mock *ImageRepositoryMock) SetReady(ctx context.Context, imageID string, stagedURL string) error {
	if mock.SetReadyFunc == nil {
		panic("ImageRepositoryMock.SetReadyFunc: method is nil but ImageRepository.SetReady was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ImageID   string
		StagedURL string
	}{
		Ctx:       ctx,
		ImageID:   imageID,
		StagedURL: stagedURL,
	}
	mock.lockSetReady.Lock()
	mock.calls.SetReady = append(mock.calls.SetReady, callInfo)
	mock.lockSetReady.Unlock()
	return mock.SetReadyFunc(ctx, imageID, stagedURL)
}

// SetReadyCalls gets all the calls that were made to SetReady.
// Check the length with:
//
//	len(mockedImageRepository.SetReadyCalls())
func (mock *ImageRepositoryMock) SetReadyCalls() []struct {
	Ctx       context.Context
	ImageID   string
	StagedURL string
} {
	var calls []struct {
		Ctx       context.Context
		ImageID   string
		StagedURL string
	}
	mock.lockSetReady.RLock()
	calls = mock.calls.SetReady
	mock.lockSetReady.RUnlock()
	return calls
}
