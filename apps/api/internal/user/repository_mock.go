// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"context"
	"github.com/real-staging-ai/api/internal/storage/queries"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			CountFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the Count method")
//			},
//			CreateFunc: func(ctx context.Context, auth0Sub string, stripeCustomerID string, role string) (*queries.CreateUserRow, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, userID string) error {
//				panic("mock out the Delete method")
//			},
//			GetByAuth0SubFunc: func(ctx context.Context, auth0Sub string) (*queries.GetUserByAuth0SubRow, error) {
//				panic("mock out the GetByAuth0Sub method")
//			},
//			GetByIDFunc: func(ctx context.Context, userID string) (*queries.GetUserByIDRow, error) {
//				panic("mock out the GetByID method")
//			},
//			GetByStripeCustomerIDFunc: func(ctx context.Context, stripeCustomerID string) (*queries.GetUserByStripeCustomerIDRow, error) {
//				panic("mock out the GetByStripeCustomerID method")
//			},
//			GetProfileByAuth0SubFunc: func(ctx context.Context, auth0Sub string) (*queries.GetUserProfileByAuth0SubRow, error) {
//				panic("mock out the GetProfileByAuth0Sub method")
//			},
//			GetProfileByIDFunc: func(ctx context.Context, userID string) (*queries.GetUserProfileByIDRow, error) {
//				panic("mock out the GetProfileByID method")
//			},
//			ListFunc: func(ctx context.Context, limit int, offset int) ([]*queries.ListUsersRow, error) {
//				panic("mock out the List method")
//			},
//			UpdateProfileFunc: func(ctx context.Context, userID string, profile *ProfileUpdate) (*queries.UpdateUserProfileRow, error) {
//				panic("mock out the UpdateProfile method")
//			},
//			UpdateRoleFunc: func(ctx context.Context, userID string, role string) (*queries.UpdateUserRoleRow, error) {
//				panic("mock out the UpdateRole method")
//			},
//			UpdateStripeCustomerIDFunc: func(ctx context.Context, userID string, stripeCustomerID string) (*queries.UpdateUserStripeCustomerIDRow, error) {
//				panic("mock out the UpdateStripeCustomerID method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CountFunc mocks the Count method.
	CountFunc func(ctx context.Context) (int64, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, auth0Sub string, stripeCustomerID string, role string) (*queries.CreateUserRow, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, userID string) error

	// GetByAuth0SubFunc mocks the GetByAuth0Sub method.
	GetByAuth0SubFunc func(ctx context.Context, auth0Sub string) (*queries.GetUserByAuth0SubRow, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, userID string) (*queries.GetUserByIDRow, error)

	// GetByStripeCustomerIDFunc mocks the GetByStripeCustomerID method.
	GetByStripeCustomerIDFunc func(ctx context.Context, stripeCustomerID string) (*queries.GetUserByStripeCustomerIDRow, error)

	// GetProfileByAuth0SubFunc mocks the GetProfileByAuth0Sub method.
	GetProfileByAuth0SubFunc func(ctx context.Context, auth0Sub string) (*queries.GetUserProfileByAuth0SubRow, error)

	// GetProfileByIDFunc mocks the GetProfileByID method.
	GetProfileByIDFunc func(ctx context.Context, userID string) (*queries.GetUserProfileByIDRow, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, limit int, offset int) ([]*queries.ListUsersRow, error)

	// UpdateProfileFunc mocks the UpdateProfile method.
	UpdateProfileFunc func(ctx context.Context, userID string, profile *ProfileUpdate) (*queries.UpdateUserProfileRow, error)

	// UpdateRoleFunc mocks the UpdateRole method.
	UpdateRoleFunc func(ctx context.Context, userID string, role string) (*queries.UpdateUserRoleRow, error)

	// UpdateStripeCustomerIDFunc mocks the UpdateStripeCustomerID method.
	UpdateStripeCustomerIDFunc func(ctx context.Context, userID string, stripeCustomerID string) (*queries.UpdateUserStripeCustomerIDRow, error)

	// calls tracks calls to the methods.
	calls struct {
		// Count holds details about calls to the Count method.
		Count []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Auth0Sub is the auth0Sub argument value.
			Auth0Sub string
			// StripeCustomerID is the stripeCustomerID argument value.
			StripeCustomerID string
			// Role is the role argument value.
			Role string
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetByAuth0Sub holds details about calls to the GetByAuth0Sub method.
		GetByAuth0Sub []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Auth0Sub is the auth0Sub argument value.
			Auth0Sub string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetByStripeCustomerID holds details about calls to the GetByStripeCustomerID method.
		GetByStripeCustomerID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StripeCustomerID is the stripeCustomerID argument value.
			StripeCustomerID string
		}
		// GetProfileByAuth0Sub holds details about calls to the GetProfileByAuth0Sub method.
		GetProfileByAuth0Sub []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Auth0Sub is the auth0Sub argument value.
			Auth0Sub string
		}
		// GetProfileByID holds details about calls to the GetProfileByID method.
		GetProfileByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// UpdateProfile holds details about calls to the UpdateProfile method.
		UpdateProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// Profile is the profile argument value.
			Profile *ProfileUpdate
		}
		// UpdateRole holds details about calls to the UpdateRole method.
		UpdateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// Role is the role argument value.
			Role string
		}
		// UpdateStripeCustomerID holds details about calls to the UpdateStripeCustomerID method.
		UpdateStripeCustomerID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// StripeCustomerID is the stripeCustomerID argument value.
			StripeCustomerID string
		}
	}
	lockCount                  sync.RWMutex
	lockCreate                 sync.RWMutex
	lockDelete                 sync.RWMutex
	lockGetByAuth0Sub          sync.RWMutex
	lockGetByID                sync.RWMutex
	lockGetByStripeCustomerID  sync.RWMutex
	lockGetProfileByAuth0Sub   sync.RWMutex
	lockGetProfileByID         sync.RWMutex
	lockList                   sync.RWMutex
	lockUpdateProfile          sync.RWMutex
	lockUpdateRole             sync.RWMutex
	lockUpdateStripeCustomerID sync.RWMutex
}

// Count calls CountFunc.
func (mock *RepositoryMock) Count(ctx context.Context) (int64, error) {
	if mock.CountFunc == nil {
		panic("RepositoryMock.CountFunc: method is nil but Repository.Count was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCount.Lock()
	mock.calls.Count = append(mock.calls.Count, callInfo)
	mock.lockCount.Unlock()
	return mock.CountFunc(ctx)
}

// CountCalls gets all the calls that were made to Count.
// Check the length with:
//
//	len(mockedRepository.CountCalls())
func (mock *RepositoryMock) CountCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCount.RLock()
	calls = mock.calls.Count
	mock.lockCount.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, auth0Sub string, stripeCustomerID string, role string) (*queries.CreateUserRow, error) {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Auth0Sub         string
		StripeCustomerID string
		Role             string
	}{
		Ctx:              ctx,
		Auth0Sub:         auth0Sub,
		StripeCustomerID: stripeCustomerID,
		Role:             role,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, auth0Sub, stripeCustomerID, role)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx              context.Context
	Auth0Sub         string
	StripeCustomerID string
	Role             string
} {
	var calls []struct {
		Ctx              context.Context
		Auth0Sub         string
		StripeCustomerID string
		Role             string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryMock) Delete(ctx context.Context, userID string) error {
	if mock.DeleteFunc == nil {
		panic("RepositoryMock.DeleteFunc: method is nil but Repository.Delete was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, userID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRepository.DeleteCalls())
func (mock *RepositoryMock) DeleteCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetByAuth0Sub calls GetByAuth0SubFunc.
func (mock *RepositoryMock) GetByAuth0Sub(ctx context.Context, auth0Sub string) (*queries.GetUserByAuth0SubRow, error) {
	if mock.GetByAuth0SubFunc == nil {
		panic("RepositoryMock.GetByAuth0SubFunc: method is nil but Repository.GetByAuth0Sub was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Auth0Sub string
	}{
		Ctx:      ctx,
		Auth0Sub: auth0Sub,
	}
	mock.lockGetByAuth0Sub.Lock()
	mock.calls.GetByAuth0Sub = append(mock.calls.GetByAuth0Sub, callInfo)
	mock.lockGetByAuth0Sub.Unlock()
	return mock.GetByAuth0SubFunc(ctx, auth0Sub)
}

// GetByAuth0SubCalls gets all the calls that were made to GetByAuth0Sub.
// Check the length with:
//
//	len(mockedRepository.GetByAuth0SubCalls())
func (mock *RepositoryMock) GetByAuth0SubCalls() []struct {
	Ctx      context.Context
	Auth0Sub string
} {
	var calls []struct {
		Ctx      context.Context
		Auth0Sub string
	}
	mock.lockGetByAuth0Sub.RLock()
	calls = mock.calls.GetByAuth0Sub
	mock.lockGetByAuth0Sub.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(ctx context.Context, userID string) (*queries.GetUserByIDRow, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositoryMock.GetByIDFunc: method is nil but Repository.GetByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, userID)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByStripeCustomerID calls GetByStripeCustomerIDFunc.
func (mock *RepositoryMock) GetByStripeCustomerID(ctx context.Context, stripeCustomerID string) (*queries.GetUserByStripeCustomerIDRow, error) {
	if mock.GetByStripeCustomerIDFunc == nil {
		panic("RepositoryMock.GetByStripeCustomerIDFunc: method is nil but Repository.GetByStripeCustomerID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		StripeCustomerID string
	}{
		Ctx:              ctx,
		StripeCustomerID: stripeCustomerID,
	}
	mock.lockGetByStripeCustomerID.Lock()
	mock.calls.GetByStripeCustomerID = append(mock.calls.GetByStripeCustomerID, callInfo)
	mock.lockGetByStripeCustomerID.Unlock()
	return mock.GetByStripeCustomerIDFunc(ctx, stripeCustomerID)
}

// GetByStripeCustomerIDCalls gets all the calls that were made to GetByStripeCustomerID.
// Check the length with:
//
//	len(mockedRepository.GetByStripeCustomerIDCalls())
func (mock *RepositoryMock) GetByStripeCustomerIDCalls() []struct {
	Ctx              context.Context
	StripeCustomerID string
} {
	var calls []struct {
		Ctx              context.Context
		StripeCustomerID string
	}
	mock.lockGetByStripeCustomerID.RLock()
	calls = mock.calls.GetByStripeCustomerID
	mock.lockGetByStripeCustomerID.RUnlock()
	return calls
}

// GetProfileByAuth0Sub calls GetProfileByAuth0SubFunc.
func (mock *RepositoryMock) GetProfileByAuth0Sub(ctx context.Context, auth0Sub string) (*queries.GetUserProfileByAuth0SubRow, error) {
	if mock.GetProfileByAuth0SubFunc == nil {
		panic("RepositoryMock.GetProfileByAuth0SubFunc: method is nil but Repository.GetProfileByAuth0Sub was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Auth0Sub string
	}{
		Ctx:      ctx,
		Auth0Sub: auth0Sub,
	}
	mock.lockGetProfileByAuth0Sub.Lock()
	mock.calls.GetProfileByAuth0Sub = append(mock.calls.GetProfileByAuth0Sub, callInfo)
	mock.lockGetProfileByAuth0Sub.Unlock()
	return mock.GetProfileByAuth0SubFunc(ctx, auth0Sub)
}

// GetProfileByAuth0SubCalls gets all the calls that were made to GetProfileByAuth0Sub.
// Check the length with:
//
//	len(mockedRepository.GetProfileByAuth0SubCalls())
func (mock *RepositoryMock) GetProfileByAuth0SubCalls() []struct {
	Ctx      context.Context
	Auth0Sub string
} {
	var calls []struct {
		Ctx      context.Context
		Auth0Sub string
	}
	mock.lockGetProfileByAuth0Sub.RLock()
	calls = mock.calls.GetProfileByAuth0Sub
	mock.lockGetProfileByAuth0Sub.RUnlock()
	return calls
}

// GetProfileByID calls GetProfileByIDFunc.
func (mock *RepositoryMock) GetProfileByID(ctx context.Context, userID string) (*queries.GetUserProfileByIDRow, error) {
	if mock.GetProfileByIDFunc == nil {
		panic("RepositoryMock.GetProfileByIDFunc: method is nil but Repository.GetProfileByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetProfileByID.Lock()
	mock.calls.GetProfileByID = append(mock.calls.GetProfileByID, callInfo)
	mock.lockGetProfileByID.Unlock()
	return mock.GetProfileByIDFunc(ctx, userID)
}

// GetProfileByIDCalls gets all the calls that were made to GetProfileByID.
// Check the length with:
//
//	len(mockedRepository.GetProfileByIDCalls())
func (mock *RepositoryMock) GetProfileByIDCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetProfileByID.RLock()
	calls = mock.calls.GetProfileByID
	mock.lockGetProfileByID.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RepositoryMock) List(ctx context.Context, limit int, offset int) ([]*queries.ListUsersRow, error) {
	if mock.ListFunc == nil {
		panic("RepositoryMock.ListFunc: method is nil but Repository.List was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, limit, offset)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedRepository.ListCalls())
func (mock *RepositoryMock) ListCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// UpdateProfile calls UpdateProfileFunc.
func (mock *RepositoryMock) UpdateProfile(ctx context.Context, userID string, profile *ProfileUpdate) (*queries.UpdateUserProfileRow, error) {
	if mock.UpdateProfileFunc == nil {
		panic("RepositoryMock.UpdateProfileFunc: method is nil but Repository.UpdateProfile was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		UserID  string
		Profile *ProfileUpdate
	}{
		Ctx:     ctx,
		UserID:  userID,
		Profile: profile,
	}
	mock.lockUpdateProfile.Lock()
	mock.calls.UpdateProfile = append(mock.calls.UpdateProfile, callInfo)
	mock.lockUpdateProfile.Unlock()
	return mock.UpdateProfileFunc(ctx, userID, profile)
}

// UpdateProfileCalls gets all the calls that were made to UpdateProfile.
// Check the length with:
//
//	len(mockedRepository.UpdateProfileCalls())
func (mock *RepositoryMock) UpdateProfileCalls() []struct {
	Ctx     context.Context
	UserID  string
	Profile *ProfileUpdate
} {
	var calls []struct {
		Ctx     context.Context
		UserID  string
		Profile *ProfileUpdate
	}
	mock.lockUpdateProfile.RLock()
	calls = mock.calls.UpdateProfile
	mock.lockUpdateProfile.RUnlock()
	return calls
}

// UpdateRole calls UpdateRoleFunc.
func (mock *RepositoryMock) UpdateRole(ctx context.Context, userID string, role string) (*queries.UpdateUserRoleRow, error) {
	if mock.UpdateRoleFunc == nil {
		panic("RepositoryMock.UpdateRoleFunc: method is nil but Repository.UpdateRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
		Role   string
	}{
		Ctx:    ctx,
		UserID: userID,
		Role:   role,
	}
	mock.lockUpdateRole.Lock()
	mock.calls.UpdateRole = append(mock.calls.UpdateRole, callInfo)
	mock.lockUpdateRole.Unlock()
	return mock.UpdateRoleFunc(ctx, userID, role)
}

// UpdateRoleCalls gets all the calls that were made to UpdateRole.
// Check the length with:
//
//	len(mockedRepository.UpdateRoleCalls())
func (mock *RepositoryMock) UpdateRoleCalls() []struct {
	Ctx    context.Context
	UserID string
	Role   string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
		Role   string
	}
	mock.lockUpdateRole.RLock()
	calls = mock.calls.UpdateRole
	mock.lockUpdateRole.RUnlock()
	return calls
}

// UpdateStripeCustomerID calls UpdateStripeCustomerIDFunc.
func (mock *RepositoryMock) UpdateStripeCustomerID(ctx context.Context, userID string, stripeCustomerID string) (*queries.UpdateUserStripeCustomerIDRow, error) {
	if mock.UpdateStripeCustomerIDFunc == nil {
		panic("RepositoryMock.UpdateStripeCustomerIDFunc: method is nil but Repository.UpdateStripeCustomerID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserID           string
		StripeCustomerID string
	}{
		Ctx:              ctx,
		UserID:           userID,
		StripeCustomerID: stripeCustomerID,
	}
	mock.lockUpdateStripeCustomerID.Lock()
	mock.calls.UpdateStripeCustomerID = append(mock.calls.UpdateStripeCustomerID, callInfo)
	mock.lockUpdateStripeCustomerID.Unlock()
	return mock.UpdateStripeCustomerIDFunc(ctx, userID, stripeCustomerID)
}

// UpdateStripeCustomerIDCalls gets all the calls that were made to UpdateStripeCustomerID.
// Check the length with:
//
//	len(mockedRepository.UpdateStripeCustomerIDCalls())
func (mock *RepositoryMock) UpdateStripeCustomerIDCalls() []struct {
	Ctx              context.Context
	UserID           string
	StripeCustomerID string
} {
	var calls []struct {
		Ctx              context.Context
		UserID           string
		StripeCustomerID string
	}
	mock.lockUpdateStripeCustomerID.RLock()
	calls = mock.calls.UpdateStripeCustomerID
	mock.lockUpdateStripeCustomerID.RUnlock()
	return calls
}
