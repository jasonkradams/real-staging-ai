// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"context"
	"sync"
)

// Ensure, that ProfileServiceMock does implement ProfileService.
// If this is not the case, regenerate this file with moq.
var _ ProfileService = &ProfileServiceMock{}

// ProfileServiceMock is a mock implementation of ProfileService.
//
//	func TestSomethingThatUsesProfileService(t *testing.T) {
//
//		// make and configure a mocked ProfileService
//		mockedProfileService := &ProfileServiceMock{
//			GetProfileFunc: func(ctx context.Context, userID string) (*ProfileResponse, error) {
//				panic("mock out the GetProfile method")
//			},
//			GetProfileByAuth0SubFunc: func(ctx context.Context, auth0Sub string) (*ProfileResponse, error) {
//				panic("mock out the GetProfileByAuth0Sub method")
//			},
//			UpdateProfileFunc: func(ctx context.Context, userID string, req *ProfileUpdateRequest) (*ProfileResponse, error) {
//				panic("mock out the UpdateProfile method")
//			},
//		}
//
//		// use mockedProfileService in code that requires ProfileService
//		// and then make assertions.
//
//	}
type ProfileServiceMock struct {
	// GetProfileFunc mocks the GetProfile method.
	GetProfileFunc func(ctx context.Context, userID string) (*ProfileResponse, error)

	// GetProfileByAuth0SubFunc mocks the GetProfileByAuth0Sub method.
	GetProfileByAuth0SubFunc func(ctx context.Context, auth0Sub string) (*ProfileResponse, error)

	// UpdateProfileFunc mocks the UpdateProfile method.
	UpdateProfileFunc func(ctx context.Context, userID string, req *ProfileUpdateRequest) (*ProfileResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetProfile holds details about calls to the GetProfile method.
		GetProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetProfileByAuth0Sub holds details about calls to the GetProfileByAuth0Sub method.
		GetProfileByAuth0Sub []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Auth0Sub is the auth0Sub argument value.
			Auth0Sub string
		}
		// UpdateProfile holds details about calls to the UpdateProfile method.
		UpdateProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// Req is the req argument value.
			Req *ProfileUpdateRequest
		}
	}
	lockGetProfile           sync.RWMutex
	lockGetProfileByAuth0Sub sync.RWMutex
	lockUpdateProfile        sync.RWMutex
}

// GetProfile calls GetProfileFunc.
func (mock *ProfileServiceMock) GetProfile(ctx context.Context, userID string) (*ProfileResponse, error) {
	if mock.GetProfileFunc == nil {
		panic("ProfileServiceMock.GetProfileFunc: method is nil but ProfileService.GetProfile was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetProfile.Lock()
	mock.calls.GetProfile = append(mock.calls.GetProfile, callInfo)
	mock.lockGetProfile.Unlock()
	return mock.GetProfileFunc(ctx, userID)
}

// GetProfileCalls gets all the calls that were made to GetProfile.
// Check the length with:
//
//	len(mockedProfileService.GetProfileCalls())
func (mock *ProfileServiceMock) GetProfileCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetProfile.RLock()
	calls = mock.calls.GetProfile
	mock.lockGetProfile.RUnlock()
	return calls
}

// GetProfileByAuth0Sub calls GetProfileByAuth0SubFunc.
func (mock *ProfileServiceMock) GetProfileByAuth0Sub(ctx context.Context, auth0Sub string) (*ProfileResponse, error) {
	if mock.GetProfileByAuth0SubFunc == nil {
		panic("ProfileServiceMock.GetProfileByAuth0SubFunc: method is nil but ProfileService.GetProfileByAuth0Sub was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Auth0Sub string
	}{
		Ctx:      ctx,
		Auth0Sub: auth0Sub,
	}
	mock.lockGetProfileByAuth0Sub.Lock()
	mock.calls.GetProfileByAuth0Sub = append(mock.calls.GetProfileByAuth0Sub, callInfo)
	mock.lockGetProfileByAuth0Sub.Unlock()
	return mock.GetProfileByAuth0SubFunc(ctx, auth0Sub)
}

// GetProfileByAuth0SubCalls gets all the calls that were made to GetProfileByAuth0Sub.
// Check the length with:
//
//	len(mockedProfileService.GetProfileByAuth0SubCalls())
func (mock *ProfileServiceMock) GetProfileByAuth0SubCalls() []struct {
	Ctx      context.Context
	Auth0Sub string
} {
	var calls []struct {
		Ctx      context.Context
		Auth0Sub string
	}
	mock.lockGetProfileByAuth0Sub.RLock()
	calls = mock.calls.GetProfileByAuth0Sub
	mock.lockGetProfileByAuth0Sub.RUnlock()
	return calls
}

// UpdateProfile calls UpdateProfileFunc.
func (mock *ProfileServiceMock) UpdateProfile(ctx context.Context, userID string, req *ProfileUpdateRequest) (*ProfileResponse, error) {
	if mock.UpdateProfileFunc == nil {
		panic("ProfileServiceMock.UpdateProfileFunc: method is nil but ProfileService.UpdateProfile was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
		Req    *ProfileUpdateRequest
	}{
		Ctx:    ctx,
		UserID: userID,
		Req:    req,
	}
	mock.lockUpdateProfile.Lock()
	mock.calls.UpdateProfile = append(mock.calls.UpdateProfile, callInfo)
	mock.lockUpdateProfile.Unlock()
	return mock.UpdateProfileFunc(ctx, userID, req)
}

// UpdateProfileCalls gets all the calls that were made to UpdateProfile.
// Check the length with:
//
//	len(mockedProfileService.UpdateProfileCalls())
func (mock *ProfileServiceMock) UpdateProfileCalls() []struct {
	Ctx    context.Context
	UserID string
	Req    *ProfileUpdateRequest
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
		Req    *ProfileUpdateRequest
	}
	mock.lockUpdateProfile.RLock()
	calls = mock.calls.UpdateProfile
	mock.lockUpdateProfile.RUnlock()
	return calls
}
