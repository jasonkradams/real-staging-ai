// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sse

import (
	"context"
	"github.com/labstack/echo/v4"
	"io"
	"sync"
)

// Ensure, that SSEMock does implement SSE.
// If this is not the case, regenerate this file with moq.
var _ SSE = &SSEMock{}

// SSEMock is a mock implementation of SSE.
//
//	func TestSomethingThatUsesSSE(t *testing.T) {
//
//		// make and configure a mocked SSE
//		mockedSSE := &SSEMock{
//			StreamImageFunc: func(ctx context.Context, w io.Writer, imageID string) error {
//				panic("mock out the StreamImage method")
//			},
//		}
//
//		// use mockedSSE in code that requires SSE
//		// and then make assertions.
//
//	}
type SSEMock struct {
	// StreamImageFunc mocks the StreamImage method.
	StreamImageFunc func(ctx context.Context, w io.Writer, imageID string) error

	// calls tracks calls to the methods.
	calls struct {
		// StreamImage holds details about calls to the StreamImage method.
		StreamImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// W is the w argument value.
			W io.Writer
			// ImageID is the imageID argument value.
			ImageID string
		}
	}
	lockStreamImage sync.RWMutex
}

// StreamImage calls StreamImageFunc.
func (mock *SSEMock) StreamImage(ctx context.Context, w io.Writer, imageID string) error {
	if mock.StreamImageFunc == nil {
		panic("SSEMock.StreamImageFunc: method is nil but SSE.StreamImage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		W       io.Writer
		ImageID string
	}{
		Ctx:     ctx,
		W:       w,
		ImageID: imageID,
	}
	mock.lockStreamImage.Lock()
	mock.calls.StreamImage = append(mock.calls.StreamImage, callInfo)
	mock.lockStreamImage.Unlock()
	return mock.StreamImageFunc(ctx, w, imageID)
}

// StreamImageCalls gets all the calls that were made to StreamImage.
// Check the length with:
//
//	len(mockedSSE.StreamImageCalls())
func (mock *SSEMock) StreamImageCalls() []struct {
	Ctx     context.Context
	W       io.Writer
	ImageID string
} {
	var calls []struct {
		Ctx     context.Context
		W       io.Writer
		ImageID string
	}
	mock.lockStreamImage.RLock()
	calls = mock.calls.StreamImage
	mock.lockStreamImage.RUnlock()
	return calls
}

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ Handler = &HandlerMock{}

// HandlerMock is a mock implementation of Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked Handler
//		mockedHandler := &HandlerMock{
//			EventsFunc: func(c echo.Context) error {
//				panic("mock out the Events method")
//			},
//		}
//
//		// use mockedHandler in code that requires Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// EventsFunc mocks the Events method.
	EventsFunc func(c echo.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Events holds details about calls to the Events method.
		Events []struct {
			// C is the c argument value.
			C echo.Context
		}
	}
	lockEvents sync.RWMutex
}

// Events calls EventsFunc.
func (mock *HandlerMock) Events(c echo.Context) error {
	if mock.EventsFunc == nil {
		panic("HandlerMock.EventsFunc: method is nil but Handler.Events was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockEvents.Lock()
	mock.calls.Events = append(mock.calls.Events, callInfo)
	mock.lockEvents.Unlock()
	return mock.EventsFunc(c)
}

// EventsCalls gets all the calls that were made to Events.
// Check the length with:
//
//	len(mockedHandler.EventsCalls())
func (mock *HandlerMock) EventsCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockEvents.RLock()
	calls = mock.calls.Events
	mock.lockEvents.RUnlock()
	return calls
}
