// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package image

import (
	"github.com/labstack/echo/v4"
	"sync"
)

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ Handler = &HandlerMock{}

// HandlerMock is a mock implementation of Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked Handler
//		mockedHandler := &HandlerMock{
//			CreateImageFunc: func(c echo.Context) error {
//				panic("mock out the CreateImage method")
//			},
//			DeleteImageFunc: func(c echo.Context) error {
//				panic("mock out the DeleteImage method")
//			},
//			GetImageFunc: func(c echo.Context) error {
//				panic("mock out the GetImage method")
//			},
//			GetProjectCostFunc: func(c echo.Context) error {
//				panic("mock out the GetProjectCost method")
//			},
//			GetProjectImagesFunc: func(c echo.Context) error {
//				panic("mock out the GetProjectImages method")
//			},
//		}
//
//		// use mockedHandler in code that requires Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// CreateImageFunc mocks the CreateImage method.
	CreateImageFunc func(c echo.Context) error

	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(c echo.Context) error

	// GetImageFunc mocks the GetImage method.
	GetImageFunc func(c echo.Context) error

	// GetProjectCostFunc mocks the GetProjectCost method.
	GetProjectCostFunc func(c echo.Context) error

	// GetProjectImagesFunc mocks the GetProjectImages method.
	GetProjectImagesFunc func(c echo.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateImage holds details about calls to the CreateImage method.
		CreateImage []struct {
			// C is the c argument value.
			C echo.Context
		}
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// C is the c argument value.
			C echo.Context
		}
		// GetImage holds details about calls to the GetImage method.
		GetImage []struct {
			// C is the c argument value.
			C echo.Context
		}
		// GetProjectCost holds details about calls to the GetProjectCost method.
		GetProjectCost []struct {
			// C is the c argument value.
			C echo.Context
		}
		// GetProjectImages holds details about calls to the GetProjectImages method.
		GetProjectImages []struct {
			// C is the c argument value.
			C echo.Context
		}
	}
	lockCreateImage      sync.RWMutex
	lockDeleteImage      sync.RWMutex
	lockGetImage         sync.RWMutex
	lockGetProjectCost   sync.RWMutex
	lockGetProjectImages sync.RWMutex
}

// CreateImage calls CreateImageFunc.
func (mock *HandlerMock) CreateImage(c echo.Context) error {
	if mock.CreateImageFunc == nil {
		panic("HandlerMock.CreateImageFunc: method is nil but Handler.CreateImage was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockCreateImage.Lock()
	mock.calls.CreateImage = append(mock.calls.CreateImage, callInfo)
	mock.lockCreateImage.Unlock()
	return mock.CreateImageFunc(c)
}

// CreateImageCalls gets all the calls that were made to CreateImage.
// Check the length with:
//
//	len(mockedHandler.CreateImageCalls())
func (mock *HandlerMock) CreateImageCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockCreateImage.RLock()
	calls = mock.calls.CreateImage
	mock.lockCreateImage.RUnlock()
	return calls
}

// DeleteImage calls DeleteImageFunc.
func (mock *HandlerMock) DeleteImage(c echo.Context) error {
	if mock.DeleteImageFunc == nil {
		panic("HandlerMock.DeleteImageFunc: method is nil but Handler.DeleteImage was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	mock.lockDeleteImage.Unlock()
	return mock.DeleteImageFunc(c)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//
//	len(mockedHandler.DeleteImageCalls())
func (mock *HandlerMock) DeleteImageCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	mock.lockDeleteImage.RUnlock()
	return calls
}

// GetImage calls GetImageFunc.
func (mock *HandlerMock) GetImage(c echo.Context) error {
	if mock.GetImageFunc == nil {
		panic("HandlerMock.GetImageFunc: method is nil but Handler.GetImage was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockGetImage.Lock()
	mock.calls.GetImage = append(mock.calls.GetImage, callInfo)
	mock.lockGetImage.Unlock()
	return mock.GetImageFunc(c)
}

// GetImageCalls gets all the calls that were made to GetImage.
// Check the length with:
//
//	len(mockedHandler.GetImageCalls())
func (mock *HandlerMock) GetImageCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockGetImage.RLock()
	calls = mock.calls.GetImage
	mock.lockGetImage.RUnlock()
	return calls
}

// GetProjectCost calls GetProjectCostFunc.
func (mock *HandlerMock) GetProjectCost(c echo.Context) error {
	if mock.GetProjectCostFunc == nil {
		panic("HandlerMock.GetProjectCostFunc: method is nil but Handler.GetProjectCost was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockGetProjectCost.Lock()
	mock.calls.GetProjectCost = append(mock.calls.GetProjectCost, callInfo)
	mock.lockGetProjectCost.Unlock()
	return mock.GetProjectCostFunc(c)
}

// GetProjectCostCalls gets all the calls that were made to GetProjectCost.
// Check the length with:
//
//	len(mockedHandler.GetProjectCostCalls())
func (mock *HandlerMock) GetProjectCostCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockGetProjectCost.RLock()
	calls = mock.calls.GetProjectCost
	mock.lockGetProjectCost.RUnlock()
	return calls
}

// GetProjectImages calls GetProjectImagesFunc.
func (mock *HandlerMock) GetProjectImages(c echo.Context) error {
	if mock.GetProjectImagesFunc == nil {
		panic("HandlerMock.GetProjectImagesFunc: method is nil but Handler.GetProjectImages was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockGetProjectImages.Lock()
	mock.calls.GetProjectImages = append(mock.calls.GetProjectImages, callInfo)
	mock.lockGetProjectImages.Unlock()
	return mock.GetProjectImagesFunc(c)
}

// GetProjectImagesCalls gets all the calls that were made to GetProjectImages.
// Check the length with:
//
//	len(mockedHandler.GetProjectImagesCalls())
func (mock *HandlerMock) GetProjectImagesCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockGetProjectImages.RLock()
	calls = mock.calls.GetProjectImages
	mock.lockGetProjectImages.RUnlock()
	return calls
}
