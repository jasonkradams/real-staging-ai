// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package image

import (
	"context"
	"sync"
)

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ Handler = &HandlerMock{}

// HandlerMock is a mock implementation of Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked Handler
//		mockedHandler := &HandlerMock{
//			CreateImageFunc: func(ctx context.Context, req *CreateImageRequest) (*Image, error) {
//				panic("mock out the CreateImage method")
//			},
//			DeleteImageFunc: func(ctx context.Context, imageID string) error {
//				panic("mock out the DeleteImage method")
//			},
//			GetImageFunc: func(ctx context.Context, imageID string) (*Image, error) {
//				panic("mock out the GetImage method")
//			},
//			GetImagesForUserFunc: func(ctx context.Context, userID string) ([]*Image, error) {
//				panic("mock out the GetImagesForUser method")
//			},
//		}
//
//		// use mockedHandler in code that requires Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// CreateImageFunc mocks the CreateImage method.
	CreateImageFunc func(ctx context.Context, req *CreateImageRequest) (*Image, error)

	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(ctx context.Context, imageID string) error

	// GetImageFunc mocks the GetImage method.
	GetImageFunc func(ctx context.Context, imageID string) (*Image, error)

	// GetImagesForUserFunc mocks the GetImagesForUser method.
	GetImagesForUserFunc func(ctx context.Context, userID string) ([]*Image, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateImage holds details about calls to the CreateImage method.
		CreateImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *CreateImageRequest
		}
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID string
		}
		// GetImage holds details about calls to the GetImage method.
		GetImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID string
		}
		// GetImagesForUser holds details about calls to the GetImagesForUser method.
		GetImagesForUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
	}
	lockCreateImage      sync.RWMutex
	lockDeleteImage      sync.RWMutex
	lockGetImage         sync.RWMutex
	lockGetImagesForUser sync.RWMutex
}

// CreateImage calls CreateImageFunc.
func (mock *HandlerMock) CreateImage(ctx context.Context, req *CreateImageRequest) (*Image, error) {
	if mock.CreateImageFunc == nil {
		panic("HandlerMock.CreateImageFunc: method is nil but Handler.CreateImage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *CreateImageRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateImage.Lock()
	mock.calls.CreateImage = append(mock.calls.CreateImage, callInfo)
	mock.lockCreateImage.Unlock()
	return mock.CreateImageFunc(ctx, req)
}

// CreateImageCalls gets all the calls that were made to CreateImage.
// Check the length with:
//
//	len(mockedHandler.CreateImageCalls())
func (mock *HandlerMock) CreateImageCalls() []struct {
	Ctx context.Context
	Req *CreateImageRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *CreateImageRequest
	}
	mock.lockCreateImage.RLock()
	calls = mock.calls.CreateImage
	mock.lockCreateImage.RUnlock()
	return calls
}

// DeleteImage calls DeleteImageFunc.
func (mock *HandlerMock) DeleteImage(ctx context.Context, imageID string) error {
	if mock.DeleteImageFunc == nil {
		panic("HandlerMock.DeleteImageFunc: method is nil but Handler.DeleteImage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ImageID string
	}{
		Ctx:     ctx,
		ImageID: imageID,
	}
	mock.lockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	mock.lockDeleteImage.Unlock()
	return mock.DeleteImageFunc(ctx, imageID)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//
//	len(mockedHandler.DeleteImageCalls())
func (mock *HandlerMock) DeleteImageCalls() []struct {
	Ctx     context.Context
	ImageID string
} {
	var calls []struct {
		Ctx     context.Context
		ImageID string
	}
	mock.lockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	mock.lockDeleteImage.RUnlock()
	return calls
}

// GetImage calls GetImageFunc.
func (mock *HandlerMock) GetImage(ctx context.Context, imageID string) (*Image, error) {
	if mock.GetImageFunc == nil {
		panic("HandlerMock.GetImageFunc: method is nil but Handler.GetImage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ImageID string
	}{
		Ctx:     ctx,
		ImageID: imageID,
	}
	mock.lockGetImage.Lock()
	mock.calls.GetImage = append(mock.calls.GetImage, callInfo)
	mock.lockGetImage.Unlock()
	return mock.GetImageFunc(ctx, imageID)
}

// GetImageCalls gets all the calls that were made to GetImage.
// Check the length with:
//
//	len(mockedHandler.GetImageCalls())
func (mock *HandlerMock) GetImageCalls() []struct {
	Ctx     context.Context
	ImageID string
} {
	var calls []struct {
		Ctx     context.Context
		ImageID string
	}
	mock.lockGetImage.RLock()
	calls = mock.calls.GetImage
	mock.lockGetImage.RUnlock()
	return calls
}

// GetImagesForUser calls GetImagesForUserFunc.
func (mock *HandlerMock) GetImagesForUser(ctx context.Context, userID string) ([]*Image, error) {
	if mock.GetImagesForUserFunc == nil {
		panic("HandlerMock.GetImagesForUserFunc: method is nil but Handler.GetImagesForUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetImagesForUser.Lock()
	mock.calls.GetImagesForUser = append(mock.calls.GetImagesForUser, callInfo)
	mock.lockGetImagesForUser.Unlock()
	return mock.GetImagesForUserFunc(ctx, userID)
}

// GetImagesForUserCalls gets all the calls that were made to GetImagesForUser.
// Check the length with:
//
//	len(mockedHandler.GetImagesForUserCalls())
func (mock *HandlerMock) GetImagesForUserCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetImagesForUser.RLock()
	calls = mock.calls.GetImagesForUser
	mock.lockGetImagesForUser.RUnlock()
	return calls
}
