// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-staging-ai/api/internal/storage (interfaces: ProjectRepository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/project_repository_mock.go github.com/virtual-staging-ai/api/internal/storage ProjectRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	project "github.com/virtual-staging-ai/api/internal/project"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// CountProjectsByUserID mocks base method.
func (m *MockProjectRepository) CountProjectsByUserID(ctx context.Context, userID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProjectsByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProjectsByUserID indicates an expected call of CountProjectsByUserID.
func (mr *MockProjectRepositoryMockRecorder) CountProjectsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProjectsByUserID", reflect.TypeOf((*MockProjectRepository)(nil).CountProjectsByUserID), ctx, userID)
}

// CreateProject mocks base method.
func (m *MockProjectRepository) CreateProject(ctx context.Context, p *project.Project, userID string) (*project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, p, userID)
	ret0, _ := ret[0].(*project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectRepositoryMockRecorder) CreateProject(ctx, p, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectRepository)(nil).CreateProject), ctx, p, userID)
}

// DeleteProject mocks base method.
func (m *MockProjectRepository) DeleteProject(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectRepositoryMockRecorder) DeleteProject(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectRepository)(nil).DeleteProject), ctx, projectID)
}

// DeleteProjectByUserID mocks base method.
func (m *MockProjectRepository) DeleteProjectByUserID(ctx context.Context, projectID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectByUserID", ctx, projectID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectByUserID indicates an expected call of DeleteProjectByUserID.
func (mr *MockProjectRepositoryMockRecorder) DeleteProjectByUserID(ctx, projectID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectByUserID", reflect.TypeOf((*MockProjectRepository)(nil).DeleteProjectByUserID), ctx, projectID, userID)
}

// GetProjectByID mocks base method.
func (m *MockProjectRepository) GetProjectByID(ctx context.Context, projectID string) (*project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", ctx, projectID)
	ret0, _ := ret[0].(*project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockProjectRepositoryMockRecorder) GetProjectByID(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockProjectRepository)(nil).GetProjectByID), ctx, projectID)
}

// GetProjectByIDAndUserID mocks base method.
func (m *MockProjectRepository) GetProjectByIDAndUserID(ctx context.Context, projectID, userID string) (*project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByIDAndUserID", ctx, projectID, userID)
	ret0, _ := ret[0].(*project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByIDAndUserID indicates an expected call of GetProjectByIDAndUserID.
func (mr *MockProjectRepositoryMockRecorder) GetProjectByIDAndUserID(ctx, projectID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByIDAndUserID", reflect.TypeOf((*MockProjectRepository)(nil).GetProjectByIDAndUserID), ctx, projectID, userID)
}

// GetProjects mocks base method.
func (m *MockProjectRepository) GetProjects(ctx context.Context) ([]project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx)
	ret0, _ := ret[0].([]project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockProjectRepositoryMockRecorder) GetProjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockProjectRepository)(nil).GetProjects), ctx)
}

// GetProjectsByUserID mocks base method.
func (m *MockProjectRepository) GetProjectsByUserID(ctx context.Context, userID string) ([]project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsByUserID", ctx, userID)
	ret0, _ := ret[0].([]project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsByUserID indicates an expected call of GetProjectsByUserID.
func (mr *MockProjectRepositoryMockRecorder) GetProjectsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsByUserID", reflect.TypeOf((*MockProjectRepository)(nil).GetProjectsByUserID), ctx, userID)
}

// UpdateProject mocks base method.
func (m *MockProjectRepository) UpdateProject(ctx context.Context, projectID, name string) (*project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, projectID, name)
	ret0, _ := ret[0].(*project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectRepositoryMockRecorder) UpdateProject(ctx, projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProject), ctx, projectID, name)
}

// UpdateProjectByUserID mocks base method.
func (m *MockProjectRepository) UpdateProjectByUserID(ctx context.Context, projectID, userID, name string) (*project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectByUserID", ctx, projectID, userID, name)
	ret0, _ := ret[0].(*project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectByUserID indicates an expected call of UpdateProjectByUserID.
func (mr *MockProjectRepositoryMockRecorder) UpdateProjectByUserID(ctx, projectID, userID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectByUserID", reflect.TypeOf((*MockProjectRepository)(nil).UpdateProjectByUserID), ctx, projectID, userID, name)
}
