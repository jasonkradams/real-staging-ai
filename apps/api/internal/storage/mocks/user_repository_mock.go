// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-staging-ai/api/internal/storage (interfaces: UserRepository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/user_repository_mock.go github.com/virtual-staging-ai/api/internal/storage UserRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	queries "github.com/virtual-staging-ai/api/internal/storage/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CountUsers mocks base method.
func (m *MockUserRepository) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockUserRepositoryMockRecorder) CountUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockUserRepository)(nil).CountUsers), ctx)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, auth0Sub, stripeCustomerID, role string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, auth0Sub, stripeCustomerID, role)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, auth0Sub, stripeCustomerID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, auth0Sub, stripeCustomerID, role)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, userID)
}

// GetUserByAuth0Sub mocks base method.
func (m *MockUserRepository) GetUserByAuth0Sub(ctx context.Context, auth0Sub string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuth0Sub", ctx, auth0Sub)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuth0Sub indicates an expected call of GetUserByAuth0Sub.
func (mr *MockUserRepositoryMockRecorder) GetUserByAuth0Sub(ctx, auth0Sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuth0Sub", reflect.TypeOf((*MockUserRepository)(nil).GetUserByAuth0Sub), ctx, auth0Sub)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, userID string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, userID)
}

// GetUserByStripeCustomerID mocks base method.
func (m *MockUserRepository) GetUserByStripeCustomerID(ctx context.Context, stripeCustomerID string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByStripeCustomerID", ctx, stripeCustomerID)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByStripeCustomerID indicates an expected call of GetUserByStripeCustomerID.
func (mr *MockUserRepositoryMockRecorder) GetUserByStripeCustomerID(ctx, stripeCustomerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByStripeCustomerID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByStripeCustomerID), ctx, stripeCustomerID)
}

// ListUsers mocks base method.
func (m *MockUserRepository) ListUsers(ctx context.Context, limit, offset int) ([]*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, limit, offset)
	ret0, _ := ret[0].([]*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserRepositoryMockRecorder) ListUsers(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserRepository)(nil).ListUsers), ctx, limit, offset)
}

// UpdateUserRole mocks base method.
func (m *MockUserRepository) UpdateUserRole(ctx context.Context, userID, role string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, userID, role)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockUserRepositoryMockRecorder) UpdateUserRole(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserRole), ctx, userID, role)
}

// UpdateUserStripeCustomerID mocks base method.
func (m *MockUserRepository) UpdateUserStripeCustomerID(ctx context.Context, userID, stripeCustomerID string) (*queries.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStripeCustomerID", ctx, userID, stripeCustomerID)
	ret0, _ := ret[0].(*queries.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserStripeCustomerID indicates an expected call of UpdateUserStripeCustomerID.
func (mr *MockUserRepositoryMockRecorder) UpdateUserStripeCustomerID(ctx, userID, stripeCustomerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStripeCustomerID", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserStripeCustomerID), ctx, userID, stripeCustomerID)
}
