// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-staging-ai/api/internal/storage (interfaces: JobRepository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/job_repository_mock.go github.com/virtual-staging-ai/api/internal/storage JobRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	queries "github.com/virtual-staging-ai/api/internal/storage/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockJobRepository is a mock of JobRepository interface.
type MockJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobRepositoryMockRecorder
	isgomock struct{}
}

// MockJobRepositoryMockRecorder is the mock recorder for MockJobRepository.
type MockJobRepositoryMockRecorder struct {
	mock *MockJobRepository
}

// NewMockJobRepository creates a new mock instance.
func NewMockJobRepository(ctrl *gomock.Controller) *MockJobRepository {
	mock := &MockJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRepository) EXPECT() *MockJobRepositoryMockRecorder {
	return m.recorder
}

// CompleteJob mocks base method.
func (m *MockJobRepository) CompleteJob(ctx context.Context, jobID string) (*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteJob", ctx, jobID)
	ret0, _ := ret[0].(*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteJob indicates an expected call of CompleteJob.
func (mr *MockJobRepositoryMockRecorder) CompleteJob(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteJob", reflect.TypeOf((*MockJobRepository)(nil).CompleteJob), ctx, jobID)
}

// CreateJob mocks base method.
func (m *MockJobRepository) CreateJob(ctx context.Context, imageID, jobType string, payloadJSON []byte) (*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, imageID, jobType, payloadJSON)
	ret0, _ := ret[0].(*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobRepositoryMockRecorder) CreateJob(ctx, imageID, jobType, payloadJSON any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJobRepository)(nil).CreateJob), ctx, imageID, jobType, payloadJSON)
}

// DeleteJob mocks base method.
func (m *MockJobRepository) DeleteJob(ctx context.Context, jobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockJobRepositoryMockRecorder) DeleteJob(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockJobRepository)(nil).DeleteJob), ctx, jobID)
}

// DeleteJobsByImageID mocks base method.
func (m *MockJobRepository) DeleteJobsByImageID(ctx context.Context, imageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobsByImageID", ctx, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobsByImageID indicates an expected call of DeleteJobsByImageID.
func (mr *MockJobRepositoryMockRecorder) DeleteJobsByImageID(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobsByImageID", reflect.TypeOf((*MockJobRepository)(nil).DeleteJobsByImageID), ctx, imageID)
}

// FailJob mocks base method.
func (m *MockJobRepository) FailJob(ctx context.Context, jobID, errorMsg string) (*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailJob", ctx, jobID, errorMsg)
	ret0, _ := ret[0].(*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailJob indicates an expected call of FailJob.
func (mr *MockJobRepositoryMockRecorder) FailJob(ctx, jobID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailJob", reflect.TypeOf((*MockJobRepository)(nil).FailJob), ctx, jobID, errorMsg)
}

// GetJobByID mocks base method.
func (m *MockJobRepository) GetJobByID(ctx context.Context, jobID string) (*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", ctx, jobID)
	ret0, _ := ret[0].(*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockJobRepositoryMockRecorder) GetJobByID(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockJobRepository)(nil).GetJobByID), ctx, jobID)
}

// GetJobsByImageID mocks base method.
func (m *MockJobRepository) GetJobsByImageID(ctx context.Context, imageID string) ([]*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsByImageID", ctx, imageID)
	ret0, _ := ret[0].([]*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobsByImageID indicates an expected call of GetJobsByImageID.
func (mr *MockJobRepositoryMockRecorder) GetJobsByImageID(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsByImageID", reflect.TypeOf((*MockJobRepository)(nil).GetJobsByImageID), ctx, imageID)
}

// GetPendingJobs mocks base method.
func (m *MockJobRepository) GetPendingJobs(ctx context.Context, limit int) ([]*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingJobs", ctx, limit)
	ret0, _ := ret[0].([]*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingJobs indicates an expected call of GetPendingJobs.
func (mr *MockJobRepositoryMockRecorder) GetPendingJobs(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingJobs", reflect.TypeOf((*MockJobRepository)(nil).GetPendingJobs), ctx, limit)
}

// StartJob mocks base method.
func (m *MockJobRepository) StartJob(ctx context.Context, jobID string) (*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", ctx, jobID)
	ret0, _ := ret[0].(*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockJobRepositoryMockRecorder) StartJob(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockJobRepository)(nil).StartJob), ctx, jobID)
}

// UpdateJobStatus mocks base method.
func (m *MockJobRepository) UpdateJobStatus(ctx context.Context, jobID, status string) (*queries.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", ctx, jobID, status)
	ret0, _ := ret[0].(*queries.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockJobRepositoryMockRecorder) UpdateJobStatus(ctx, jobID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockJobRepository)(nil).UpdateJobStatus), ctx, jobID, status)
}
