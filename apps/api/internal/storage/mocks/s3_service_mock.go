// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-staging-ai/api/internal/storage (interfaces: S3Service)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/s3_service_mock.go github.com/virtual-staging-ai/api/internal/storage S3Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/virtual-staging-ai/api/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockS3Service is a mock of S3Service interface.
type MockS3Service struct {
	ctrl     *gomock.Controller
	recorder *MockS3ServiceMockRecorder
	isgomock struct{}
}

// MockS3ServiceMockRecorder is the mock recorder for MockS3Service.
type MockS3ServiceMockRecorder struct {
	mock *MockS3Service
}

// NewMockS3Service creates a new mock instance.
func NewMockS3Service(ctrl *gomock.Controller) *MockS3Service {
	mock := &MockS3Service{ctrl: ctrl}
	mock.recorder = &MockS3ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Service) EXPECT() *MockS3ServiceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockS3Service) DeleteFile(ctx context.Context, fileKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, fileKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockS3ServiceMockRecorder) DeleteFile(ctx, fileKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockS3Service)(nil).DeleteFile), ctx, fileKey)
}

// GeneratePresignedUploadURL mocks base method.
func (m *MockS3Service) GeneratePresignedUploadURL(ctx context.Context, userID, filename, contentType string, fileSize int64) (*storage.PresignedUploadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedUploadURL", ctx, userID, filename, contentType, fileSize)
	ret0, _ := ret[0].(*storage.PresignedUploadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedUploadURL indicates an expected call of GeneratePresignedUploadURL.
func (mr *MockS3ServiceMockRecorder) GeneratePresignedUploadURL(ctx, userID, filename, contentType, fileSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedUploadURL", reflect.TypeOf((*MockS3Service)(nil).GeneratePresignedUploadURL), ctx, userID, filename, contentType, fileSize)
}

// GetFileURL mocks base method.
func (m *MockS3Service) GetFileURL(fileKey string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileURL", fileKey)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFileURL indicates an expected call of GetFileURL.
func (mr *MockS3ServiceMockRecorder) GetFileURL(fileKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileURL", reflect.TypeOf((*MockS3Service)(nil).GetFileURL), fileKey)
}

// HeadFile mocks base method.
func (m *MockS3Service) HeadFile(ctx context.Context, fileKey string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadFile", ctx, fileKey)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadFile indicates an expected call of HeadFile.
func (mr *MockS3ServiceMockRecorder) HeadFile(ctx, fileKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadFile", reflect.TypeOf((*MockS3Service)(nil).HeadFile), ctx, fileKey)
}
