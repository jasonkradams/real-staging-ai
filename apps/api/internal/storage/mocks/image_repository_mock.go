// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-staging-ai/api/internal/storage (interfaces: ImageRepository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/image_repository_mock.go github.com/virtual-staging-ai/api/internal/storage ImageRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	queries "github.com/virtual-staging-ai/api/internal/storage/queries"
	gomock "go.uber.org/mock/gomock"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
	isgomock struct{}
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImageRepository) CreateImage(ctx context.Context, projectID, originalURL string, roomType, style *string, seed *int64) (*queries.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", ctx, projectID, originalURL, roomType, style, seed)
	ret0, _ := ret[0].(*queries.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageRepositoryMockRecorder) CreateImage(ctx, projectID, originalURL, roomType, style, seed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImageRepository)(nil).CreateImage), ctx, projectID, originalURL, roomType, style, seed)
}

// DeleteImage mocks base method.
func (m *MockImageRepository) DeleteImage(ctx context.Context, imageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImageRepositoryMockRecorder) DeleteImage(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImageRepository)(nil).DeleteImage), ctx, imageID)
}

// DeleteImagesByProjectID mocks base method.
func (m *MockImageRepository) DeleteImagesByProjectID(ctx context.Context, projectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImagesByProjectID", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImagesByProjectID indicates an expected call of DeleteImagesByProjectID.
func (mr *MockImageRepositoryMockRecorder) DeleteImagesByProjectID(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagesByProjectID", reflect.TypeOf((*MockImageRepository)(nil).DeleteImagesByProjectID), ctx, projectID)
}

// GetImageByID mocks base method.
func (m *MockImageRepository) GetImageByID(ctx context.Context, imageID string) (*queries.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByID", ctx, imageID)
	ret0, _ := ret[0].(*queries.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByID indicates an expected call of GetImageByID.
func (mr *MockImageRepositoryMockRecorder) GetImageByID(ctx, imageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByID", reflect.TypeOf((*MockImageRepository)(nil).GetImageByID), ctx, imageID)
}

// GetImagesByProjectID mocks base method.
func (m *MockImageRepository) GetImagesByProjectID(ctx context.Context, projectID string) ([]*queries.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByProjectID", ctx, projectID)
	ret0, _ := ret[0].([]*queries.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByProjectID indicates an expected call of GetImagesByProjectID.
func (mr *MockImageRepositoryMockRecorder) GetImagesByProjectID(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByProjectID", reflect.TypeOf((*MockImageRepository)(nil).GetImagesByProjectID), ctx, projectID)
}

// UpdateImageStatus mocks base method.
func (m *MockImageRepository) UpdateImageStatus(ctx context.Context, imageID, status string) (*queries.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageStatus", ctx, imageID, status)
	ret0, _ := ret[0].(*queries.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageStatus indicates an expected call of UpdateImageStatus.
func (mr *MockImageRepositoryMockRecorder) UpdateImageStatus(ctx, imageID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageStatus", reflect.TypeOf((*MockImageRepository)(nil).UpdateImageStatus), ctx, imageID, status)
}

// UpdateImageWithError mocks base method.
func (m *MockImageRepository) UpdateImageWithError(ctx context.Context, imageID, errorMsg string) (*queries.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageWithError", ctx, imageID, errorMsg)
	ret0, _ := ret[0].(*queries.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageWithError indicates an expected call of UpdateImageWithError.
func (mr *MockImageRepositoryMockRecorder) UpdateImageWithError(ctx, imageID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageWithError", reflect.TypeOf((*MockImageRepository)(nil).UpdateImageWithError), ctx, imageID, errorMsg)
}

// UpdateImageWithStagedURL mocks base method.
func (m *MockImageRepository) UpdateImageWithStagedURL(ctx context.Context, imageID, stagedURL, status string) (*queries.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageWithStagedURL", ctx, imageID, stagedURL, status)
	ret0, _ := ret[0].(*queries.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageWithStagedURL indicates an expected call of UpdateImageWithStagedURL.
func (mr *MockImageRepositoryMockRecorder) UpdateImageWithStagedURL(ctx, imageID, stagedURL, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageWithStagedURL", reflect.TypeOf((*MockImageRepository)(nil).UpdateImageWithStagedURL), ctx, imageID, stagedURL, status)
}
