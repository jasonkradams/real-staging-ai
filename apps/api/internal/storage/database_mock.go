// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgxpool"
	"sync"
)

// Ensure, that DatabaseMock does implement Database.
// If this is not the case, regenerate this file with moq.
var _ Database = &DatabaseMock{}

// DatabaseMock is a mock implementation of Database.
//
//	func TestSomethingThatUsesDatabase(t *testing.T) {
//
//		// make and configure a mocked Database
//		mockedDatabase := &DatabaseMock{
//			CloseFunc: func()  {
//				panic("mock out the Close method")
//			},
//			ExecFunc: func(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error) {
//				panic("mock out the Exec method")
//			},
//			PoolFunc: func() *pgxpool.Pool {
//				panic("mock out the Pool method")
//			},
//			QueryFunc: func(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error) {
//				panic("mock out the Query method")
//			},
//			QueryRowFunc: func(ctx context.Context, sql string, args ...interface{}) pgx.Row {
//				panic("mock out the QueryRow method")
//			},
//		}
//
//		// use mockedDatabase in code that requires Database
//		// and then make assertions.
//
//	}
type DatabaseMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// ExecFunc mocks the Exec method.
	ExecFunc func(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error)

	// PoolFunc mocks the Pool method.
	PoolFunc func() *pgxpool.Pool

	// QueryFunc mocks the Query method.
	QueryFunc func(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Args is the args argument value.
			Args []interface{}
		}
		// Pool holds details about calls to the Pool method.
		Pool []struct {
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Args is the args argument value.
			Args []interface{}
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SQL is the sql argument value.
			SQL string
			// Args is the args argument value.
			Args []interface{}
		}
	}
	lockClose    sync.RWMutex
	lockExec     sync.RWMutex
	lockPool     sync.RWMutex
	lockQuery    sync.RWMutex
	lockQueryRow sync.RWMutex
}

// Close calls CloseFunc.
func (mock *DatabaseMock) Close() {
	if mock.CloseFunc == nil {
		panic("DatabaseMock.CloseFunc: method is nil but Database.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedDatabase.CloseCalls())
func (mock *DatabaseMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *DatabaseMock) Exec(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error) {
	if mock.ExecFunc == nil {
		panic("DatabaseMock.ExecFunc: method is nil but Database.Exec was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}{
		Ctx:  ctx,
		SQL:  sql,
		Args: args,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	return mock.ExecFunc(ctx, sql, args...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedDatabase.ExecCalls())
func (mock *DatabaseMock) ExecCalls() []struct {
	Ctx  context.Context
	SQL  string
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Pool calls PoolFunc.
func (mock *DatabaseMock) Pool() *pgxpool.Pool {
	if mock.PoolFunc == nil {
		panic("DatabaseMock.PoolFunc: method is nil but Database.Pool was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPool.Lock()
	mock.calls.Pool = append(mock.calls.Pool, callInfo)
	mock.lockPool.Unlock()
	return mock.PoolFunc()
}

// PoolCalls gets all the calls that were made to Pool.
// Check the length with:
//
//	len(mockedDatabase.PoolCalls())
func (mock *DatabaseMock) PoolCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPool.RLock()
	calls = mock.calls.Pool
	mock.lockPool.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DatabaseMock) Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error) {
	if mock.QueryFunc == nil {
		panic("DatabaseMock.QueryFunc: method is nil but Database.Query was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}{
		Ctx:  ctx,
		SQL:  sql,
		Args: args,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(ctx, sql, args...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedDatabase.QueryCalls())
func (mock *DatabaseMock) QueryCalls() []struct {
	Ctx  context.Context
	SQL  string
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *DatabaseMock) QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row {
	if mock.QueryRowFunc == nil {
		panic("DatabaseMock.QueryRowFunc: method is nil but Database.QueryRow was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}{
		Ctx:  ctx,
		SQL:  sql,
		Args: args,
	}
	mock.lockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	mock.lockQueryRow.Unlock()
	return mock.QueryRowFunc(ctx, sql, args...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//
//	len(mockedDatabase.QueryRowCalls())
func (mock *DatabaseMock) QueryRowCalls() []struct {
	Ctx  context.Context
	SQL  string
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		SQL  string
		Args []interface{}
	}
	mock.lockQueryRow.RLock()
	calls = mock.calls.QueryRow
	mock.lockQueryRow.RUnlock()
	return calls
}
