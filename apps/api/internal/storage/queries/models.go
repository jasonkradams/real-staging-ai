// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ImageStatus string

const (
	ImageStatusQueued     ImageStatus = "queued"
	ImageStatusProcessing ImageStatus = "processing"
	ImageStatusReady      ImageStatus = "ready"
	ImageStatusError      ImageStatus = "error"
)

func (e *ImageStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImageStatus(s)
	case string:
		*e = ImageStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ImageStatus: %T", src)
	}
	return nil
}

type NullImageStatus struct {
	ImageStatus ImageStatus `json:"image_status"`
	Valid       bool        `json:"valid"` // Valid is true if ImageStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImageStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ImageStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImageStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImageStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImageStatus), nil
}

type Image struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	// Cost in USD for processing this image
	CostUsd pgtype.Numeric `json:"cost_usd"`
	// The AI model ID used to process this image
	ModelUsed pgtype.Text `json:"model_used"`
	// Processing time in milliseconds
	ProcessingTimeMs pgtype.Int4 `json:"processing_time_ms"`
	// Replicate prediction ID for tracking and billing
	ReplicatePredictionID pgtype.Text `json:"replicate_prediction_id"`
}

type Invoice struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               pgtype.UUID        `json:"user_id"`
	StripeInvoiceID      string             `json:"stripe_invoice_id"`
	StripeSubscriptionID pgtype.Text        `json:"stripe_subscription_id"`
	Status               string             `json:"status"`
	AmountDue            int32              `json:"amount_due"`
	AmountPaid           int32              `json:"amount_paid"`
	Currency             pgtype.Text        `json:"currency"`
	InvoiceNumber        pgtype.Text        `json:"invoice_number"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
}

type Job struct {
	ID          pgtype.UUID        `json:"id"`
	ImageID     pgtype.UUID        `json:"image_id"`
	Type        string             `json:"type"`
	PayloadJson []byte             `json:"payload_json"`
	Status      string             `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	StartedAt   pgtype.Timestamptz `json:"started_at"`
	FinishedAt  pgtype.Timestamptz `json:"finished_at"`
}

type Plan struct {
	ID           pgtype.UUID `json:"id"`
	Code         string      `json:"code"`
	PriceID      string      `json:"price_id"`
	MonthlyLimit int32       `json:"monthly_limit"`
}

type ProcessedEvent struct {
	ID            pgtype.UUID        `json:"id"`
	StripeEventID string             `json:"stripe_event_id"`
	Type          pgtype.Text        `json:"type"`
	Payload       []byte             `json:"payload"`
	ReceivedAt    pgtype.Timestamptz `json:"received_at"`
}

type Project struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// System-wide configuration settings
type Setting struct {
	// Unique setting identifier
	Key string `json:"key"`
	// Setting value (stored as text, parsed by application)
	Value string `json:"value"`
	// Human-readable description of the setting
	Description pgtype.Text `json:"description"`
	// Timestamp of last update
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	// User who last updated the setting
	UpdatedBy pgtype.UUID `json:"updated_by"`
}

type Subscription struct {
	ID                   pgtype.UUID        `json:"id"`
	UserID               pgtype.UUID        `json:"user_id"`
	StripeSubscriptionID string             `json:"stripe_subscription_id"`
	Status               string             `json:"status"`
	PriceID              pgtype.Text        `json:"price_id"`
	CurrentPeriodStart   pgtype.Timestamptz `json:"current_period_start"`
	CurrentPeriodEnd     pgtype.Timestamptz `json:"current_period_end"`
	CancelAt             pgtype.Timestamptz `json:"cancel_at"`
	CanceledAt           pgtype.Timestamptz `json:"canceled_at"`
	CancelAtPeriodEnd    bool               `json:"cancel_at_period_end"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID               pgtype.UUID        `json:"id"`
	Auth0Sub         string             `json:"auth0_sub"`
	StripeCustomerID pgtype.Text        `json:"stripe_customer_id"`
	Role             string             `json:"role"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
}
