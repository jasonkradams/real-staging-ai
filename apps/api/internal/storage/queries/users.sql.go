// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountUsers = `-- name: CountUsers :one
SELECT COUNT(*)
FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (auth0_sub, stripe_customer_id, role)
VALUES ($1, $2, $3)
RETURNING id, auth0_sub, stripe_customer_id, role, created_at
`

type CreateUserParams struct {
	Auth0Sub         string      `json:"auth0_sub"`
	StripeCustomerID pgtype.Text `json:"stripe_customer_id"`
	Role             string      `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, CreateUser, arg.Auth0Sub, arg.StripeCustomerID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0Sub,
		&i.StripeCustomerID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteUser, id)
	return err
}

const GetUserByAuth0Sub = `-- name: GetUserByAuth0Sub :one
SELECT id, auth0_sub, stripe_customer_id, role, created_at
FROM users
WHERE auth0_sub = $1
`

func (q *Queries) GetUserByAuth0Sub(ctx context.Context, auth0Sub string) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByAuth0Sub, auth0Sub)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0Sub,
		&i.StripeCustomerID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, auth0_sub, stripe_customer_id, role, created_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0Sub,
		&i.StripeCustomerID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const GetUserByStripeCustomerID = `-- name: GetUserByStripeCustomerID :one
SELECT id, auth0_sub, stripe_customer_id, role, created_at
FROM users
WHERE stripe_customer_id = $1
`

func (q *Queries) GetUserByStripeCustomerID(ctx context.Context, stripeCustomerID pgtype.Text) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByStripeCustomerID, stripeCustomerID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0Sub,
		&i.StripeCustomerID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, auth0_sub, stripe_customer_id, role, created_at
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, ListUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Auth0Sub,
			&i.StripeCustomerID,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET role = $2
WHERE id = $1
RETURNING id, auth0_sub, stripe_customer_id, role, created_at
`

type UpdateUserRoleParams struct {
	ID   pgtype.UUID `json:"id"`
	Role string      `json:"role"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (*User, error) {
	row := q.db.QueryRow(ctx, UpdateUserRole, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0Sub,
		&i.StripeCustomerID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}

const UpdateUserStripeCustomerID = `-- name: UpdateUserStripeCustomerID :one
UPDATE users
SET stripe_customer_id = $2
WHERE id = $1
RETURNING id, auth0_sub, stripe_customer_id, role, created_at
`

type UpdateUserStripeCustomerIDParams struct {
	ID               pgtype.UUID `json:"id"`
	StripeCustomerID pgtype.Text `json:"stripe_customer_id"`
}

func (q *Queries) UpdateUserStripeCustomerID(ctx context.Context, arg UpdateUserStripeCustomerIDParams) (*User, error) {
	row := q.db.QueryRow(ctx, UpdateUserStripeCustomerID, arg.ID, arg.StripeCustomerID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth0Sub,
		&i.StripeCustomerID,
		&i.Role,
		&i.CreatedAt,
	)
	return &i, err
}
