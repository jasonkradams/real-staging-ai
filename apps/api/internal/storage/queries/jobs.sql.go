// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: jobs.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CompleteJob = `-- name: CompleteJob :one
UPDATE jobs
SET status = 'completed', finished_at = now()
WHERE id = $1
RETURNING id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
`

func (q *Queries) CompleteJob(ctx context.Context, id pgtype.UUID) (*Job, error) {
	row := q.db.QueryRow(ctx, CompleteJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Type,
		&i.PayloadJson,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return &i, err
}

const CreateJob = `-- name: CreateJob :one
INSERT INTO jobs (image_id, type, payload_json)
VALUES ($1, $2, $3)
RETURNING id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
`

type CreateJobParams struct {
	ImageID     pgtype.UUID `json:"image_id"`
	Type        string      `json:"type"`
	PayloadJson []byte      `json:"payload_json"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (*Job, error) {
	row := q.db.QueryRow(ctx, CreateJob, arg.ImageID, arg.Type, arg.PayloadJson)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Type,
		&i.PayloadJson,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return &i, err
}

const DeleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteJob, id)
	return err
}

const DeleteJobsByImageID = `-- name: DeleteJobsByImageID :exec
DELETE FROM jobs
WHERE image_id = $1
`

func (q *Queries) DeleteJobsByImageID(ctx context.Context, imageID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteJobsByImageID, imageID)
	return err
}

const FailJob = `-- name: FailJob :one
UPDATE jobs
SET status = 'failed', error = $2, finished_at = now()
WHERE id = $1
RETURNING id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
`

type FailJobParams struct {
	ID    pgtype.UUID `json:"id"`
	Error pgtype.Text `json:"error"`
}

func (q *Queries) FailJob(ctx context.Context, arg FailJobParams) (*Job, error) {
	row := q.db.QueryRow(ctx, FailJob, arg.ID, arg.Error)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Type,
		&i.PayloadJson,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return &i, err
}

const GetJobByID = `-- name: GetJobByID :one
SELECT id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
FROM jobs
WHERE id = $1
`

func (q *Queries) GetJobByID(ctx context.Context, id pgtype.UUID) (*Job, error) {
	row := q.db.QueryRow(ctx, GetJobByID, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Type,
		&i.PayloadJson,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return &i, err
}

const GetJobsByImageID = `-- name: GetJobsByImageID :many
SELECT id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
FROM jobs
WHERE image_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetJobsByImageID(ctx context.Context, imageID pgtype.UUID) ([]*Job, error) {
	rows, err := q.db.Query(ctx, GetJobsByImageID, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.ImageID,
			&i.Type,
			&i.PayloadJson,
			&i.Status,
			&i.Error,
			&i.CreatedAt,
			&i.StartedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPendingJobs = `-- name: GetPendingJobs :many
SELECT id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
FROM jobs
WHERE status = 'queued'
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) GetPendingJobs(ctx context.Context, limit int32) ([]*Job, error) {
	rows, err := q.db.Query(ctx, GetPendingJobs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.ImageID,
			&i.Type,
			&i.PayloadJson,
			&i.Status,
			&i.Error,
			&i.CreatedAt,
			&i.StartedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const StartJob = `-- name: StartJob :one
UPDATE jobs
SET status = 'processing', started_at = now()
WHERE id = $1
RETURNING id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
`

func (q *Queries) StartJob(ctx context.Context, id pgtype.UUID) (*Job, error) {
	row := q.db.QueryRow(ctx, StartJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Type,
		&i.PayloadJson,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return &i, err
}

const UpdateJobStatus = `-- name: UpdateJobStatus :one
UPDATE jobs
SET status = $2, updated_at = now()
WHERE id = $1
RETURNING id, image_id, type, payload_json, status, error, created_at, started_at, finished_at
`

type UpdateJobStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateJobStatus(ctx context.Context, arg UpdateJobStatusParams) (*Job, error) {
	row := q.db.QueryRow(ctx, UpdateJobStatus, arg.ID, arg.Status)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ImageID,
		&i.Type,
		&i.PayloadJson,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return &i, err
}
