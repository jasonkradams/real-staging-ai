// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: images.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateImage = `-- name: CreateImage :one
INSERT INTO images (project_id, original_url, room_type, style, seed)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, project_id, original_url, staged_url, room_type, style, seed, status, error, created_at, updated_at
`

type CreateImageParams struct {
	ProjectID   pgtype.UUID `json:"project_id"`
	OriginalUrl string      `json:"original_url"`
	RoomType    pgtype.Text `json:"room_type"`
	Style       pgtype.Text `json:"style"`
	Seed        pgtype.Int8 `json:"seed"`
}

type CreateImageRow struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (*CreateImageRow, error) {
	row := q.db.QueryRow(ctx, CreateImage,
		arg.ProjectID,
		arg.OriginalUrl,
		arg.RoomType,
		arg.Style,
		arg.Seed,
	)
	var i CreateImageRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OriginalUrl,
		&i.StagedUrl,
		&i.RoomType,
		&i.Style,
		&i.Seed,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteImage, id)
	return err
}

const DeleteImagesByProjectID = `-- name: DeleteImagesByProjectID :exec
DELETE FROM images
WHERE project_id = $1
`

func (q *Queries) DeleteImagesByProjectID(ctx context.Context, projectID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteImagesByProjectID, projectID)
	return err
}

const GetImageByID = `-- name: GetImageByID :one
SELECT id, project_id, original_url, staged_url, room_type, style, seed, status, error, created_at, updated_at
FROM images
WHERE id = $1
`

type GetImageByIDRow struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetImageByID(ctx context.Context, id pgtype.UUID) (*GetImageByIDRow, error) {
	row := q.db.QueryRow(ctx, GetImageByID, id)
	var i GetImageByIDRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OriginalUrl,
		&i.StagedUrl,
		&i.RoomType,
		&i.Style,
		&i.Seed,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetImagesByProjectID = `-- name: GetImagesByProjectID :many
SELECT id, project_id, original_url, staged_url, room_type, style, seed, status, error, created_at, updated_at
FROM images
WHERE project_id = $1
ORDER BY created_at DESC
`

type GetImagesByProjectIDRow struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetImagesByProjectID(ctx context.Context, projectID pgtype.UUID) ([]*GetImagesByProjectIDRow, error) {
	rows, err := q.db.Query(ctx, GetImagesByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetImagesByProjectIDRow{}
	for rows.Next() {
		var i GetImagesByProjectIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.OriginalUrl,
			&i.StagedUrl,
			&i.RoomType,
			&i.Style,
			&i.Seed,
			&i.Status,
			&i.Error,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListImagesForReconcile = `-- name: ListImagesForReconcile :many
SELECT id, project_id, original_url, staged_url, room_type, style, seed, status, error, created_at, updated_at
FROM images
WHERE ($1::uuid IS NULL OR project_id = $1::uuid)
  AND ($2::text IS NULL OR $2::text = '' OR status = $2::image_status)
  AND ($3::uuid IS NULL OR id > $3::uuid)
ORDER BY id ASC
LIMIT $4
`

type ListImagesForReconcileParams struct {
	Column1 pgtype.UUID `json:"column_1"`
	Column2 string      `json:"column_2"`
	Column3 pgtype.UUID `json:"column_3"`
	Limit   int32       `json:"limit"`
}

type ListImagesForReconcileRow struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) ListImagesForReconcile(ctx context.Context, arg ListImagesForReconcileParams) ([]*ListImagesForReconcileRow, error) {
	rows, err := q.db.Query(ctx, ListImagesForReconcile,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListImagesForReconcileRow{}
	for rows.Next() {
		var i ListImagesForReconcileRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.OriginalUrl,
			&i.StagedUrl,
			&i.RoomType,
			&i.Style,
			&i.Seed,
			&i.Status,
			&i.Error,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateImageStatus = `-- name: UpdateImageStatus :one
UPDATE images
SET status = $2, updated_at = now()
WHERE id = $1
RETURNING id, project_id, original_url, staged_url, room_type, style, seed, status, error, created_at, updated_at
`

type UpdateImageStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status ImageStatus `json:"status"`
}

type UpdateImageStatusRow struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateImageStatus(ctx context.Context, arg UpdateImageStatusParams) (*UpdateImageStatusRow, error) {
	row := q.db.QueryRow(ctx, UpdateImageStatus, arg.ID, arg.Status)
	var i UpdateImageStatusRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OriginalUrl,
		&i.StagedUrl,
		&i.RoomType,
		&i.Style,
		&i.Seed,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateImageWithError = `-- name: UpdateImageWithError :one
UPDATE images
SET status = 'error', error = $2, updated_at = now()
WHERE id = $1
RETURNING id, project_id, original_url, staged_url, room_type, style, seed, status, error, created_at, updated_at
`

type UpdateImageWithErrorParams struct {
	ID    pgtype.UUID `json:"id"`
	Error pgtype.Text `json:"error"`
}

type UpdateImageWithErrorRow struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateImageWithError(ctx context.Context, arg UpdateImageWithErrorParams) (*UpdateImageWithErrorRow, error) {
	row := q.db.QueryRow(ctx, UpdateImageWithError, arg.ID, arg.Error)
	var i UpdateImageWithErrorRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OriginalUrl,
		&i.StagedUrl,
		&i.RoomType,
		&i.Style,
		&i.Seed,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateImageWithStagedURL = `-- name: UpdateImageWithStagedURL :one
UPDATE images
SET staged_url = $2, status = $3, updated_at = now()
WHERE id = $1
RETURNING id, project_id, original_url, staged_url, room_type, style, seed, status, error, created_at, updated_at
`

type UpdateImageWithStagedURLParams struct {
	ID        pgtype.UUID `json:"id"`
	StagedUrl pgtype.Text `json:"staged_url"`
	Status    ImageStatus `json:"status"`
}

type UpdateImageWithStagedURLRow struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	OriginalUrl string             `json:"original_url"`
	StagedUrl   pgtype.Text        `json:"staged_url"`
	RoomType    pgtype.Text        `json:"room_type"`
	Style       pgtype.Text        `json:"style"`
	Seed        pgtype.Int8        `json:"seed"`
	Status      ImageStatus        `json:"status"`
	Error       pgtype.Text        `json:"error"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateImageWithStagedURL(ctx context.Context, arg UpdateImageWithStagedURLParams) (*UpdateImageWithStagedURLRow, error) {
	row := q.db.QueryRow(ctx, UpdateImageWithStagedURL, arg.ID, arg.StagedUrl, arg.Status)
	var i UpdateImageWithStagedURLRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.OriginalUrl,
		&i.StagedUrl,
		&i.RoomType,
		&i.Style,
		&i.Seed,
		&i.Status,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
