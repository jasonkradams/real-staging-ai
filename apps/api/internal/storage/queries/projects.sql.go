// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountProjectsByUserID = `-- name: CountProjectsByUserID :one
SELECT COUNT(*)
FROM projects
WHERE user_id = $1
`

func (q *Queries) CountProjectsByUserID(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, CountProjectsByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateProject = `-- name: CreateProject :one
INSERT INTO projects (name, user_id)
VALUES ($1, $2)
RETURNING id, name, user_id, created_at
`

type CreateProjectParams struct {
	Name   string      `json:"name"`
	UserID pgtype.UUID `json:"user_id"`
}

type CreateProjectRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (*CreateProjectRow, error) {
	row := q.db.QueryRow(ctx, CreateProject, arg.Name, arg.UserID)
	var i CreateProjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return &i, err
}

const DeleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, DeleteProject, id)
	return err
}

const DeleteProjectByUserID = `-- name: DeleteProjectByUserID :exec
DELETE FROM projects
WHERE id = $1 AND user_id = $2
`

type DeleteProjectByUserIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteProjectByUserID(ctx context.Context, arg DeleteProjectByUserIDParams) error {
	_, err := q.db.Exec(ctx, DeleteProjectByUserID, arg.ID, arg.UserID)
	return err
}

const GetAllProjects = `-- name: GetAllProjects :many
SELECT id, name, user_id, created_at
FROM projects
ORDER BY created_at DESC
`

type GetAllProjectsRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetAllProjects(ctx context.Context) ([]*GetAllProjectsRow, error) {
	rows, err := q.db.Query(ctx, GetAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllProjectsRow{}
	for rows.Next() {
		var i GetAllProjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetProjectByID = `-- name: GetProjectByID :one
SELECT id, name, user_id, created_at
FROM projects
WHERE id = $1
`

type GetProjectByIDRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetProjectByID(ctx context.Context, id pgtype.UUID) (*GetProjectByIDRow, error) {
	row := q.db.QueryRow(ctx, GetProjectByID, id)
	var i GetProjectByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return &i, err
}

const GetProjectsByUserID = `-- name: GetProjectsByUserID :many
SELECT id, name, user_id, created_at
FROM projects
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetProjectsByUserIDRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetProjectsByUserID(ctx context.Context, userID pgtype.UUID) ([]*GetProjectsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, GetProjectsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetProjectsByUserIDRow{}
	for rows.Next() {
		var i GetProjectsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = $2
WHERE id = $1
RETURNING id, name, user_id, created_at
`

type UpdateProjectParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

type UpdateProjectRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (*UpdateProjectRow, error) {
	row := q.db.QueryRow(ctx, UpdateProject, arg.ID, arg.Name)
	var i UpdateProjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return &i, err
}

const UpdateProjectByUserID = `-- name: UpdateProjectByUserID :one
UPDATE projects
SET name = $3
WHERE id = $1 AND user_id = $2
RETURNING id, name, user_id, created_at
`

type UpdateProjectByUserIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
	Name   string      `json:"name"`
}

type UpdateProjectByUserIDRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	UserID    pgtype.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) UpdateProjectByUserID(ctx context.Context, arg UpdateProjectByUserIDParams) (*UpdateProjectByUserIDRow, error) {
	row := q.db.QueryRow(ctx, UpdateProjectByUserID, arg.ID, arg.UserID, arg.Name)
	var i UpdateProjectByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return &i, err
}
