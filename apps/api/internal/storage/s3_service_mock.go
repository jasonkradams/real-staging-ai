// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"sync"
)

// Ensure, that S3ServiceMock does implement S3Service.
// If this is not the case, regenerate this file with moq.
var _ S3Service = &S3ServiceMock{}

// S3ServiceMock is a mock implementation of S3Service.
//
//	func TestSomethingThatUsesS3Service(t *testing.T) {
//
//		// make and configure a mocked S3Service
//		mockedS3Service := &S3ServiceMock{
//			CreateBucketFunc: func(ctx context.Context) error {
//				panic("mock out the CreateBucket method")
//			},
//			DeleteFileFunc: func(ctx context.Context, fileKey string) error {
//				panic("mock out the DeleteFile method")
//			},
//			GeneratePresignedUploadURLFunc: func(ctx context.Context, userID string, filename string, contentType string, fileSize int64) (*PresignedUploadResult, error) {
//				panic("mock out the GeneratePresignedUploadURL method")
//			},
//			GetFileURLFunc: func(fileKey string) string {
//				panic("mock out the GetFileURL method")
//			},
//			HeadFileFunc: func(ctx context.Context, fileKey string) (interface{}, error) {
//				panic("mock out the HeadFile method")
//			},
//		}
//
//		// use mockedS3Service in code that requires S3Service
//		// and then make assertions.
//
//	}
type S3ServiceMock struct {
	// CreateBucketFunc mocks the CreateBucket method.
	CreateBucketFunc func(ctx context.Context) error

	// DeleteFileFunc mocks the DeleteFile method.
	DeleteFileFunc func(ctx context.Context, fileKey string) error

	// GeneratePresignedUploadURLFunc mocks the GeneratePresignedUploadURL method.
	GeneratePresignedUploadURLFunc func(ctx context.Context, userID string, filename string, contentType string, fileSize int64) (*PresignedUploadResult, error)

	// GetFileURLFunc mocks the GetFileURL method.
	GetFileURLFunc func(fileKey string) string

	// HeadFileFunc mocks the HeadFile method.
	HeadFileFunc func(ctx context.Context, fileKey string) (interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateBucket holds details about calls to the CreateBucket method.
		CreateBucket []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// DeleteFile holds details about calls to the DeleteFile method.
		DeleteFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileKey is the fileKey argument value.
			FileKey string
		}
		// GeneratePresignedUploadURL holds details about calls to the GeneratePresignedUploadURL method.
		GeneratePresignedUploadURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// Filename is the filename argument value.
			Filename string
			// ContentType is the contentType argument value.
			ContentType string
			// FileSize is the fileSize argument value.
			FileSize int64
		}
		// GetFileURL holds details about calls to the GetFileURL method.
		GetFileURL []struct {
			// FileKey is the fileKey argument value.
			FileKey string
		}
		// HeadFile holds details about calls to the HeadFile method.
		HeadFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileKey is the fileKey argument value.
			FileKey string
		}
	}
	lockCreateBucket               sync.RWMutex
	lockDeleteFile                 sync.RWMutex
	lockGeneratePresignedUploadURL sync.RWMutex
	lockGetFileURL                 sync.RWMutex
	lockHeadFile                   sync.RWMutex
}

// CreateBucket calls CreateBucketFunc.
func (mock *S3ServiceMock) CreateBucket(ctx context.Context) error {
	if mock.CreateBucketFunc == nil {
		panic("S3ServiceMock.CreateBucketFunc: method is nil but S3Service.CreateBucket was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateBucket.Lock()
	mock.calls.CreateBucket = append(mock.calls.CreateBucket, callInfo)
	mock.lockCreateBucket.Unlock()
	return mock.CreateBucketFunc(ctx)
}

// CreateBucketCalls gets all the calls that were made to CreateBucket.
// Check the length with:
//
//	len(mockedS3Service.CreateBucketCalls())
func (mock *S3ServiceMock) CreateBucketCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCreateBucket.RLock()
	calls = mock.calls.CreateBucket
	mock.lockCreateBucket.RUnlock()
	return calls
}

// DeleteFile calls DeleteFileFunc.
func (mock *S3ServiceMock) DeleteFile(ctx context.Context, fileKey string) error {
	if mock.DeleteFileFunc == nil {
		panic("S3ServiceMock.DeleteFileFunc: method is nil but S3Service.DeleteFile was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FileKey string
	}{
		Ctx:     ctx,
		FileKey: fileKey,
	}
	mock.lockDeleteFile.Lock()
	mock.calls.DeleteFile = append(mock.calls.DeleteFile, callInfo)
	mock.lockDeleteFile.Unlock()
	return mock.DeleteFileFunc(ctx, fileKey)
}

// DeleteFileCalls gets all the calls that were made to DeleteFile.
// Check the length with:
//
//	len(mockedS3Service.DeleteFileCalls())
func (mock *S3ServiceMock) DeleteFileCalls() []struct {
	Ctx     context.Context
	FileKey string
} {
	var calls []struct {
		Ctx     context.Context
		FileKey string
	}
	mock.lockDeleteFile.RLock()
	calls = mock.calls.DeleteFile
	mock.lockDeleteFile.RUnlock()
	return calls
}

// GeneratePresignedUploadURL calls GeneratePresignedUploadURLFunc.
func (mock *S3ServiceMock) GeneratePresignedUploadURL(ctx context.Context, userID string, filename string, contentType string, fileSize int64) (*PresignedUploadResult, error) {
	if mock.GeneratePresignedUploadURLFunc == nil {
		panic("S3ServiceMock.GeneratePresignedUploadURLFunc: method is nil but S3Service.GeneratePresignedUploadURL was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		UserID      string
		Filename    string
		ContentType string
		FileSize    int64
	}{
		Ctx:         ctx,
		UserID:      userID,
		Filename:    filename,
		ContentType: contentType,
		FileSize:    fileSize,
	}
	mock.lockGeneratePresignedUploadURL.Lock()
	mock.calls.GeneratePresignedUploadURL = append(mock.calls.GeneratePresignedUploadURL, callInfo)
	mock.lockGeneratePresignedUploadURL.Unlock()
	return mock.GeneratePresignedUploadURLFunc(ctx, userID, filename, contentType, fileSize)
}

// GeneratePresignedUploadURLCalls gets all the calls that were made to GeneratePresignedUploadURL.
// Check the length with:
//
//	len(mockedS3Service.GeneratePresignedUploadURLCalls())
func (mock *S3ServiceMock) GeneratePresignedUploadURLCalls() []struct {
	Ctx         context.Context
	UserID      string
	Filename    string
	ContentType string
	FileSize    int64
} {
	var calls []struct {
		Ctx         context.Context
		UserID      string
		Filename    string
		ContentType string
		FileSize    int64
	}
	mock.lockGeneratePresignedUploadURL.RLock()
	calls = mock.calls.GeneratePresignedUploadURL
	mock.lockGeneratePresignedUploadURL.RUnlock()
	return calls
}

// GetFileURL calls GetFileURLFunc.
func (mock *S3ServiceMock) GetFileURL(fileKey string) string {
	if mock.GetFileURLFunc == nil {
		panic("S3ServiceMock.GetFileURLFunc: method is nil but S3Service.GetFileURL was just called")
	}
	callInfo := struct {
		FileKey string
	}{
		FileKey: fileKey,
	}
	mock.lockGetFileURL.Lock()
	mock.calls.GetFileURL = append(mock.calls.GetFileURL, callInfo)
	mock.lockGetFileURL.Unlock()
	return mock.GetFileURLFunc(fileKey)
}

// GetFileURLCalls gets all the calls that were made to GetFileURL.
// Check the length with:
//
//	len(mockedS3Service.GetFileURLCalls())
func (mock *S3ServiceMock) GetFileURLCalls() []struct {
	FileKey string
} {
	var calls []struct {
		FileKey string
	}
	mock.lockGetFileURL.RLock()
	calls = mock.calls.GetFileURL
	mock.lockGetFileURL.RUnlock()
	return calls
}

// HeadFile calls HeadFileFunc.
func (mock *S3ServiceMock) HeadFile(ctx context.Context, fileKey string) (interface{}, error) {
	if mock.HeadFileFunc == nil {
		panic("S3ServiceMock.HeadFileFunc: method is nil but S3Service.HeadFile was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FileKey string
	}{
		Ctx:     ctx,
		FileKey: fileKey,
	}
	mock.lockHeadFile.Lock()
	mock.calls.HeadFile = append(mock.calls.HeadFile, callInfo)
	mock.lockHeadFile.Unlock()
	return mock.HeadFileFunc(ctx, fileKey)
}

// HeadFileCalls gets all the calls that were made to HeadFile.
// Check the length with:
//
//	len(mockedS3Service.HeadFileCalls())
func (mock *S3ServiceMock) HeadFileCalls() []struct {
	Ctx     context.Context
	FileKey string
} {
	var calls []struct {
		Ctx     context.Context
		FileKey string
	}
	mock.lockHeadFile.RLock()
	calls = mock.calls.HeadFile
	mock.lockHeadFile.RUnlock()
	return calls
}
