// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package project

import (
	"context"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			CreateProjectFunc: func(ctx context.Context, req *CreateRequest) (*Project, error) {
//				panic("mock out the CreateProject method")
//			},
//			CreateProjectWithUploadFunc: func(ctx context.Context, req *CreateRequest, filename string, contentType string, fileSize int64) (*WithUploadURL, error) {
//				panic("mock out the CreateProjectWithUpload method")
//			},
//			DeleteProjectFunc: func(ctx context.Context, projectID string, userID string) error {
//				panic("mock out the DeleteProject method")
//			},
//			GetProjectByIDFunc: func(ctx context.Context, projectID string, userID string) (*Project, error) {
//				panic("mock out the GetProjectByID method")
//			},
//			GetProjectStatsFunc: func(ctx context.Context, userID string) (*ProjectStats, error) {
//				panic("mock out the GetProjectStats method")
//			},
//			GetProjectsByUserFunc: func(ctx context.Context, userID string) ([]Project, error) {
//				panic("mock out the GetProjectsByUser method")
//			},
//			UpdateProjectFunc: func(ctx context.Context, projectID string, userID string, newName string) (*Project, error) {
//				panic("mock out the UpdateProject method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(ctx context.Context, req *CreateRequest) (*Project, error)

	// CreateProjectWithUploadFunc mocks the CreateProjectWithUpload method.
	CreateProjectWithUploadFunc func(ctx context.Context, req *CreateRequest, filename string, contentType string, fileSize int64) (*WithUploadURL, error)

	// DeleteProjectFunc mocks the DeleteProject method.
	DeleteProjectFunc func(ctx context.Context, projectID string, userID string) error

	// GetProjectByIDFunc mocks the GetProjectByID method.
	GetProjectByIDFunc func(ctx context.Context, projectID string, userID string) (*Project, error)

	// GetProjectStatsFunc mocks the GetProjectStats method.
	GetProjectStatsFunc func(ctx context.Context, userID string) (*ProjectStats, error)

	// GetProjectsByUserFunc mocks the GetProjectsByUser method.
	GetProjectsByUserFunc func(ctx context.Context, userID string) ([]Project, error)

	// UpdateProjectFunc mocks the UpdateProject method.
	UpdateProjectFunc func(ctx context.Context, projectID string, userID string, newName string) (*Project, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *CreateRequest
		}
		// CreateProjectWithUpload holds details about calls to the CreateProjectWithUpload method.
		CreateProjectWithUpload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *CreateRequest
			// Filename is the filename argument value.
			Filename string
			// ContentType is the contentType argument value.
			ContentType string
			// FileSize is the fileSize argument value.
			FileSize int64
		}
		// DeleteProject holds details about calls to the DeleteProject method.
		DeleteProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// UserID is the userID argument value.
			UserID string
		}
		// GetProjectByID holds details about calls to the GetProjectByID method.
		GetProjectByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// UserID is the userID argument value.
			UserID string
		}
		// GetProjectStats holds details about calls to the GetProjectStats method.
		GetProjectStats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// GetProjectsByUser holds details about calls to the GetProjectsByUser method.
		GetProjectsByUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// UpdateProject holds details about calls to the UpdateProject method.
		UpdateProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// UserID is the userID argument value.
			UserID string
			// NewName is the newName argument value.
			NewName string
		}
	}
	lockCreateProject           sync.RWMutex
	lockCreateProjectWithUpload sync.RWMutex
	lockDeleteProject           sync.RWMutex
	lockGetProjectByID          sync.RWMutex
	lockGetProjectStats         sync.RWMutex
	lockGetProjectsByUser       sync.RWMutex
	lockUpdateProject           sync.RWMutex
}

// CreateProject calls CreateProjectFunc.
func (mock *ServiceMock) CreateProject(ctx context.Context, req *CreateRequest) (*Project, error) {
	if mock.CreateProjectFunc == nil {
		panic("ServiceMock.CreateProjectFunc: method is nil but Service.CreateProject was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *CreateRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	return mock.CreateProjectFunc(ctx, req)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//
//	len(mockedService.CreateProjectCalls())
func (mock *ServiceMock) CreateProjectCalls() []struct {
	Ctx context.Context
	Req *CreateRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *CreateRequest
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// CreateProjectWithUpload calls CreateProjectWithUploadFunc.
func (mock *ServiceMock) CreateProjectWithUpload(ctx context.Context, req *CreateRequest, filename string, contentType string, fileSize int64) (*WithUploadURL, error) {
	if mock.CreateProjectWithUploadFunc == nil {
		panic("ServiceMock.CreateProjectWithUploadFunc: method is nil but Service.CreateProjectWithUpload was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Req         *CreateRequest
		Filename    string
		ContentType string
		FileSize    int64
	}{
		Ctx:         ctx,
		Req:         req,
		Filename:    filename,
		ContentType: contentType,
		FileSize:    fileSize,
	}
	mock.lockCreateProjectWithUpload.Lock()
	mock.calls.CreateProjectWithUpload = append(mock.calls.CreateProjectWithUpload, callInfo)
	mock.lockCreateProjectWithUpload.Unlock()
	return mock.CreateProjectWithUploadFunc(ctx, req, filename, contentType, fileSize)
}

// CreateProjectWithUploadCalls gets all the calls that were made to CreateProjectWithUpload.
// Check the length with:
//
//	len(mockedService.CreateProjectWithUploadCalls())
func (mock *ServiceMock) CreateProjectWithUploadCalls() []struct {
	Ctx         context.Context
	Req         *CreateRequest
	Filename    string
	ContentType string
	FileSize    int64
} {
	var calls []struct {
		Ctx         context.Context
		Req         *CreateRequest
		Filename    string
		ContentType string
		FileSize    int64
	}
	mock.lockCreateProjectWithUpload.RLock()
	calls = mock.calls.CreateProjectWithUpload
	mock.lockCreateProjectWithUpload.RUnlock()
	return calls
}

// DeleteProject calls DeleteProjectFunc.
func (mock *ServiceMock) DeleteProject(ctx context.Context, projectID string, userID string) error {
	if mock.DeleteProjectFunc == nil {
		panic("ServiceMock.DeleteProjectFunc: method is nil but Service.DeleteProject was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		UserID    string
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		UserID:    userID,
	}
	mock.lockDeleteProject.Lock()
	mock.calls.DeleteProject = append(mock.calls.DeleteProject, callInfo)
	mock.lockDeleteProject.Unlock()
	return mock.DeleteProjectFunc(ctx, projectID, userID)
}

// DeleteProjectCalls gets all the calls that were made to DeleteProject.
// Check the length with:
//
//	len(mockedService.DeleteProjectCalls())
func (mock *ServiceMock) DeleteProjectCalls() []struct {
	Ctx       context.Context
	ProjectID string
	UserID    string
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		UserID    string
	}
	mock.lockDeleteProject.RLock()
	calls = mock.calls.DeleteProject
	mock.lockDeleteProject.RUnlock()
	return calls
}

// GetProjectByID calls GetProjectByIDFunc.
func (mock *ServiceMock) GetProjectByID(ctx context.Context, projectID string, userID string) (*Project, error) {
	if mock.GetProjectByIDFunc == nil {
		panic("ServiceMock.GetProjectByIDFunc: method is nil but Service.GetProjectByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		UserID    string
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		UserID:    userID,
	}
	mock.lockGetProjectByID.Lock()
	mock.calls.GetProjectByID = append(mock.calls.GetProjectByID, callInfo)
	mock.lockGetProjectByID.Unlock()
	return mock.GetProjectByIDFunc(ctx, projectID, userID)
}

// GetProjectByIDCalls gets all the calls that were made to GetProjectByID.
// Check the length with:
//
//	len(mockedService.GetProjectByIDCalls())
func (mock *ServiceMock) GetProjectByIDCalls() []struct {
	Ctx       context.Context
	ProjectID string
	UserID    string
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		UserID    string
	}
	mock.lockGetProjectByID.RLock()
	calls = mock.calls.GetProjectByID
	mock.lockGetProjectByID.RUnlock()
	return calls
}

// GetProjectStats calls GetProjectStatsFunc.
func (mock *ServiceMock) GetProjectStats(ctx context.Context, userID string) (*ProjectStats, error) {
	if mock.GetProjectStatsFunc == nil {
		panic("ServiceMock.GetProjectStatsFunc: method is nil but Service.GetProjectStats was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetProjectStats.Lock()
	mock.calls.GetProjectStats = append(mock.calls.GetProjectStats, callInfo)
	mock.lockGetProjectStats.Unlock()
	return mock.GetProjectStatsFunc(ctx, userID)
}

// GetProjectStatsCalls gets all the calls that were made to GetProjectStats.
// Check the length with:
//
//	len(mockedService.GetProjectStatsCalls())
func (mock *ServiceMock) GetProjectStatsCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetProjectStats.RLock()
	calls = mock.calls.GetProjectStats
	mock.lockGetProjectStats.RUnlock()
	return calls
}

// GetProjectsByUser calls GetProjectsByUserFunc.
func (mock *ServiceMock) GetProjectsByUser(ctx context.Context, userID string) ([]Project, error) {
	if mock.GetProjectsByUserFunc == nil {
		panic("ServiceMock.GetProjectsByUserFunc: method is nil but Service.GetProjectsByUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetProjectsByUser.Lock()
	mock.calls.GetProjectsByUser = append(mock.calls.GetProjectsByUser, callInfo)
	mock.lockGetProjectsByUser.Unlock()
	return mock.GetProjectsByUserFunc(ctx, userID)
}

// GetProjectsByUserCalls gets all the calls that were made to GetProjectsByUser.
// Check the length with:
//
//	len(mockedService.GetProjectsByUserCalls())
func (mock *ServiceMock) GetProjectsByUserCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetProjectsByUser.RLock()
	calls = mock.calls.GetProjectsByUser
	mock.lockGetProjectsByUser.RUnlock()
	return calls
}

// UpdateProject calls UpdateProjectFunc.
func (mock *ServiceMock) UpdateProject(ctx context.Context, projectID string, userID string, newName string) (*Project, error) {
	if mock.UpdateProjectFunc == nil {
		panic("ServiceMock.UpdateProjectFunc: method is nil but Service.UpdateProject was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		UserID    string
		NewName   string
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		UserID:    userID,
		NewName:   newName,
	}
	mock.lockUpdateProject.Lock()
	mock.calls.UpdateProject = append(mock.calls.UpdateProject, callInfo)
	mock.lockUpdateProject.Unlock()
	return mock.UpdateProjectFunc(ctx, projectID, userID, newName)
}

// UpdateProjectCalls gets all the calls that were made to UpdateProject.
// Check the length with:
//
//	len(mockedService.UpdateProjectCalls())
func (mock *ServiceMock) UpdateProjectCalls() []struct {
	Ctx       context.Context
	ProjectID string
	UserID    string
	NewName   string
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		UserID    string
		NewName   string
	}
	mock.lockUpdateProject.RLock()
	calls = mock.calls.UpdateProject
	mock.lockUpdateProject.RUnlock()
	return calls
}
