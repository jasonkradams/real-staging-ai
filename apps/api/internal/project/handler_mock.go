// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package project

import (
	"github.com/labstack/echo/v4"
	"sync"
)

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ Handler = &HandlerMock{}

// HandlerMock is a mock implementation of Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked Handler
//		mockedHandler := &HandlerMock{
//			CreateFunc: func(c echo.Context) error {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(c echo.Context) error {
//				panic("mock out the Delete method")
//			},
//			GetByIDFunc: func(c echo.Context) error {
//				panic("mock out the GetByID method")
//			},
//			ListFunc: func(c echo.Context) error {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(c echo.Context) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedHandler in code that requires Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(c echo.Context) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(c echo.Context) error

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(c echo.Context) error

	// ListFunc mocks the List method.
	ListFunc func(c echo.Context) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(c echo.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// C is the c argument value.
			C echo.Context
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// C is the c argument value.
			C echo.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// C is the c argument value.
			C echo.Context
		}
		// List holds details about calls to the List method.
		List []struct {
			// C is the c argument value.
			C echo.Context
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// C is the c argument value.
			C echo.Context
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockGetByID sync.RWMutex
	lockList    sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *HandlerMock) Create(c echo.Context) error {
	if mock.CreateFunc == nil {
		panic("HandlerMock.CreateFunc: method is nil but Handler.Create was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(c)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedHandler.CreateCalls())
func (mock *HandlerMock) CreateCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *HandlerMock) Delete(c echo.Context) error {
	if mock.DeleteFunc == nil {
		panic("HandlerMock.DeleteFunc: method is nil but Handler.Delete was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(c)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedHandler.DeleteCalls())
func (mock *HandlerMock) DeleteCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *HandlerMock) GetByID(c echo.Context) error {
	if mock.GetByIDFunc == nil {
		panic("HandlerMock.GetByIDFunc: method is nil but Handler.GetByID was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(c)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedHandler.GetByIDCalls())
func (mock *HandlerMock) GetByIDCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *HandlerMock) List(c echo.Context) error {
	if mock.ListFunc == nil {
		panic("HandlerMock.ListFunc: method is nil but Handler.List was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(c)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedHandler.ListCalls())
func (mock *HandlerMock) ListCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *HandlerMock) Update(c echo.Context) error {
	if mock.UpdateFunc == nil {
		panic("HandlerMock.UpdateFunc: method is nil but Handler.Update was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(c)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedHandler.UpdateCalls())
func (mock *HandlerMock) UpdateCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
