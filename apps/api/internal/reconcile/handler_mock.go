// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package reconcile

import (
	"github.com/labstack/echo/v4"
	"sync"
)

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ Handler = &HandlerMock{}

// HandlerMock is a mock implementation of Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked Handler
//		mockedHandler := &HandlerMock{
//			ReconcileImagesFunc: func(c echo.Context) error {
//				panic("mock out the ReconcileImages method")
//			},
//		}
//
//		// use mockedHandler in code that requires Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// ReconcileImagesFunc mocks the ReconcileImages method.
	ReconcileImagesFunc func(c echo.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// ReconcileImages holds details about calls to the ReconcileImages method.
		ReconcileImages []struct {
			// C is the c argument value.
			C echo.Context
		}
	}
	lockReconcileImages sync.RWMutex
}

// ReconcileImages calls ReconcileImagesFunc.
func (mock *HandlerMock) ReconcileImages(c echo.Context) error {
	if mock.ReconcileImagesFunc == nil {
		panic("HandlerMock.ReconcileImagesFunc: method is nil but Handler.ReconcileImages was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockReconcileImages.Lock()
	mock.calls.ReconcileImages = append(mock.calls.ReconcileImages, callInfo)
	mock.lockReconcileImages.Unlock()
	return mock.ReconcileImagesFunc(c)
}

// ReconcileImagesCalls gets all the calls that were made to ReconcileImages.
// Check the length with:
//
//	len(mockedHandler.ReconcileImagesCalls())
func (mock *HandlerMock) ReconcileImagesCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockReconcileImages.RLock()
	calls = mock.calls.ReconcileImages
	mock.lockReconcileImages.RUnlock()
	return calls
}
