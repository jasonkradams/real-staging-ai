// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package settings

import (
	"context"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			GetActiveModelFunc: func(ctx context.Context) (string, error) {
//				panic("mock out the GetActiveModel method")
//			},
//			GetSettingFunc: func(ctx context.Context, key string) (*Setting, error) {
//				panic("mock out the GetSetting method")
//			},
//			ListAvailableModelsFunc: func(ctx context.Context) ([]ModelInfo, error) {
//				panic("mock out the ListAvailableModels method")
//			},
//			ListSettingsFunc: func(ctx context.Context) ([]Setting, error) {
//				panic("mock out the ListSettings method")
//			},
//			UpdateActiveModelFunc: func(ctx context.Context, modelID string, userID string) error {
//				panic("mock out the UpdateActiveModel method")
//			},
//			UpdateSettingFunc: func(ctx context.Context, key string, value string, userID string) error {
//				panic("mock out the UpdateSetting method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// GetActiveModelFunc mocks the GetActiveModel method.
	GetActiveModelFunc func(ctx context.Context) (string, error)

	// GetSettingFunc mocks the GetSetting method.
	GetSettingFunc func(ctx context.Context, key string) (*Setting, error)

	// ListAvailableModelsFunc mocks the ListAvailableModels method.
	ListAvailableModelsFunc func(ctx context.Context) ([]ModelInfo, error)

	// ListSettingsFunc mocks the ListSettings method.
	ListSettingsFunc func(ctx context.Context) ([]Setting, error)

	// UpdateActiveModelFunc mocks the UpdateActiveModel method.
	UpdateActiveModelFunc func(ctx context.Context, modelID string, userID string) error

	// UpdateSettingFunc mocks the UpdateSetting method.
	UpdateSettingFunc func(ctx context.Context, key string, value string, userID string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetActiveModel holds details about calls to the GetActiveModel method.
		GetActiveModel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetSetting holds details about calls to the GetSetting method.
		GetSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// ListAvailableModels holds details about calls to the ListAvailableModels method.
		ListAvailableModels []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListSettings holds details about calls to the ListSettings method.
		ListSettings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateActiveModel holds details about calls to the UpdateActiveModel method.
		UpdateActiveModel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ModelID is the modelID argument value.
			ModelID string
			// UserID is the userID argument value.
			UserID string
		}
		// UpdateSetting holds details about calls to the UpdateSetting method.
		UpdateSetting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
			// UserID is the userID argument value.
			UserID string
		}
	}
	lockGetActiveModel      sync.RWMutex
	lockGetSetting          sync.RWMutex
	lockListAvailableModels sync.RWMutex
	lockListSettings        sync.RWMutex
	lockUpdateActiveModel   sync.RWMutex
	lockUpdateSetting       sync.RWMutex
}

// GetActiveModel calls GetActiveModelFunc.
func (mock *ServiceMock) GetActiveModel(ctx context.Context) (string, error) {
	if mock.GetActiveModelFunc == nil {
		panic("ServiceMock.GetActiveModelFunc: method is nil but Service.GetActiveModel was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetActiveModel.Lock()
	mock.calls.GetActiveModel = append(mock.calls.GetActiveModel, callInfo)
	mock.lockGetActiveModel.Unlock()
	return mock.GetActiveModelFunc(ctx)
}

// GetActiveModelCalls gets all the calls that were made to GetActiveModel.
// Check the length with:
//
//	len(mockedService.GetActiveModelCalls())
func (mock *ServiceMock) GetActiveModelCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetActiveModel.RLock()
	calls = mock.calls.GetActiveModel
	mock.lockGetActiveModel.RUnlock()
	return calls
}

// GetSetting calls GetSettingFunc.
func (mock *ServiceMock) GetSetting(ctx context.Context, key string) (*Setting, error) {
	if mock.GetSettingFunc == nil {
		panic("ServiceMock.GetSettingFunc: method is nil but Service.GetSetting was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetSetting.Lock()
	mock.calls.GetSetting = append(mock.calls.GetSetting, callInfo)
	mock.lockGetSetting.Unlock()
	return mock.GetSettingFunc(ctx, key)
}

// GetSettingCalls gets all the calls that were made to GetSetting.
// Check the length with:
//
//	len(mockedService.GetSettingCalls())
func (mock *ServiceMock) GetSettingCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetSetting.RLock()
	calls = mock.calls.GetSetting
	mock.lockGetSetting.RUnlock()
	return calls
}

// ListAvailableModels calls ListAvailableModelsFunc.
func (mock *ServiceMock) ListAvailableModels(ctx context.Context) ([]ModelInfo, error) {
	if mock.ListAvailableModelsFunc == nil {
		panic("ServiceMock.ListAvailableModelsFunc: method is nil but Service.ListAvailableModels was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListAvailableModels.Lock()
	mock.calls.ListAvailableModels = append(mock.calls.ListAvailableModels, callInfo)
	mock.lockListAvailableModels.Unlock()
	return mock.ListAvailableModelsFunc(ctx)
}

// ListAvailableModelsCalls gets all the calls that were made to ListAvailableModels.
// Check the length with:
//
//	len(mockedService.ListAvailableModelsCalls())
func (mock *ServiceMock) ListAvailableModelsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListAvailableModels.RLock()
	calls = mock.calls.ListAvailableModels
	mock.lockListAvailableModels.RUnlock()
	return calls
}

// ListSettings calls ListSettingsFunc.
func (mock *ServiceMock) ListSettings(ctx context.Context) ([]Setting, error) {
	if mock.ListSettingsFunc == nil {
		panic("ServiceMock.ListSettingsFunc: method is nil but Service.ListSettings was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListSettings.Lock()
	mock.calls.ListSettings = append(mock.calls.ListSettings, callInfo)
	mock.lockListSettings.Unlock()
	return mock.ListSettingsFunc(ctx)
}

// ListSettingsCalls gets all the calls that were made to ListSettings.
// Check the length with:
//
//	len(mockedService.ListSettingsCalls())
func (mock *ServiceMock) ListSettingsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListSettings.RLock()
	calls = mock.calls.ListSettings
	mock.lockListSettings.RUnlock()
	return calls
}

// UpdateActiveModel calls UpdateActiveModelFunc.
func (mock *ServiceMock) UpdateActiveModel(ctx context.Context, modelID string, userID string) error {
	if mock.UpdateActiveModelFunc == nil {
		panic("ServiceMock.UpdateActiveModelFunc: method is nil but Service.UpdateActiveModel was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ModelID string
		UserID  string
	}{
		Ctx:     ctx,
		ModelID: modelID,
		UserID:  userID,
	}
	mock.lockUpdateActiveModel.Lock()
	mock.calls.UpdateActiveModel = append(mock.calls.UpdateActiveModel, callInfo)
	mock.lockUpdateActiveModel.Unlock()
	return mock.UpdateActiveModelFunc(ctx, modelID, userID)
}

// UpdateActiveModelCalls gets all the calls that were made to UpdateActiveModel.
// Check the length with:
//
//	len(mockedService.UpdateActiveModelCalls())
func (mock *ServiceMock) UpdateActiveModelCalls() []struct {
	Ctx     context.Context
	ModelID string
	UserID  string
} {
	var calls []struct {
		Ctx     context.Context
		ModelID string
		UserID  string
	}
	mock.lockUpdateActiveModel.RLock()
	calls = mock.calls.UpdateActiveModel
	mock.lockUpdateActiveModel.RUnlock()
	return calls
}

// UpdateSetting calls UpdateSettingFunc.
func (mock *ServiceMock) UpdateSetting(ctx context.Context, key string, value string, userID string) error {
	if mock.UpdateSettingFunc == nil {
		panic("ServiceMock.UpdateSettingFunc: method is nil but Service.UpdateSetting was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Key    string
		Value  string
		UserID string
	}{
		Ctx:    ctx,
		Key:    key,
		Value:  value,
		UserID: userID,
	}
	mock.lockUpdateSetting.Lock()
	mock.calls.UpdateSetting = append(mock.calls.UpdateSetting, callInfo)
	mock.lockUpdateSetting.Unlock()
	return mock.UpdateSettingFunc(ctx, key, value, userID)
}

// UpdateSettingCalls gets all the calls that were made to UpdateSetting.
// Check the length with:
//
//	len(mockedService.UpdateSettingCalls())
func (mock *ServiceMock) UpdateSettingCalls() []struct {
	Ctx    context.Context
	Key    string
	Value  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Key    string
		Value  string
		UserID string
	}
	mock.lockUpdateSetting.RLock()
	calls = mock.calls.UpdateSetting
	mock.lockUpdateSetting.RUnlock()
	return calls
}
