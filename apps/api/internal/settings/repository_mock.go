// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package settings

import (
	"context"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			GetByKeyFunc: func(ctx context.Context, key string) (*Setting, error) {
//				panic("mock out the GetByKey method")
//			},
//			ListFunc: func(ctx context.Context) ([]Setting, error) {
//				panic("mock out the List method")
//			},
//			UpdateFunc: func(ctx context.Context, key string, value string, userID string) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// GetByKeyFunc mocks the GetByKey method.
	GetByKeyFunc func(ctx context.Context, key string) (*Setting, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]Setting, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, key string, value string, userID string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetByKey holds details about calls to the GetByKey method.
		GetByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
			// UserID is the userID argument value.
			UserID string
		}
	}
	lockGetByKey sync.RWMutex
	lockList     sync.RWMutex
	lockUpdate   sync.RWMutex
}

// GetByKey calls GetByKeyFunc.
func (mock *RepositoryMock) GetByKey(ctx context.Context, key string) (*Setting, error) {
	if mock.GetByKeyFunc == nil {
		panic("RepositoryMock.GetByKeyFunc: method is nil but Repository.GetByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetByKey.Lock()
	mock.calls.GetByKey = append(mock.calls.GetByKey, callInfo)
	mock.lockGetByKey.Unlock()
	return mock.GetByKeyFunc(ctx, key)
}

// GetByKeyCalls gets all the calls that were made to GetByKey.
// Check the length with:
//
//	len(mockedRepository.GetByKeyCalls())
func (mock *RepositoryMock) GetByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGetByKey.RLock()
	calls = mock.calls.GetByKey
	mock.lockGetByKey.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RepositoryMock) List(ctx context.Context) ([]Setting, error) {
	if mock.ListFunc == nil {
		panic("RepositoryMock.ListFunc: method is nil but Repository.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedRepository.ListCalls())
func (mock *RepositoryMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(ctx context.Context, key string, value string, userID string) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Key    string
		Value  string
		UserID string
	}{
		Ctx:    ctx,
		Key:    key,
		Value:  value,
		UserID: userID,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, key, value, userID)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	Ctx    context.Context
	Key    string
	Value  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Key    string
		Value  string
		UserID string
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
