openapi: 3.1.0
info:
  title: Virtual Staging AI API
  description: API for the Virtual Staging AI application.
  version: 0.1.0
servers:
  - url: /api
paths:
  /v1/projects:
    get:
      summary: Get all projects for the authenticated user
      description:
        Retrieve a list of all projects belonging to the authenticated
        user
      tags:
        - Projects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new project
      description: Create a new project for the authenticated user
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: The created project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/projects/{id}:
    get:
      summary: Get a project by ID
      description:
        Retrieve a specific project by its ID. The project must belong
        to the authenticated user.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "200":
          description: The project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update a project
      description:
        Update an existing project. The project must belong to the authenticated
        user.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
      responses:
        "200":
          description: The updated project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a project
      description:
        Delete a project and all associated data. The project must belong
        to the authenticated user.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "204":
          description: Project successfully deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/uploads/presign:
    post:
      summary: Generate presigned URL for file upload
      description: Generate a presigned URL that allows direct upload to S3 storage
      tags:
        - Uploads
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PresignUploadRequest"
      responses:
        "200":
          description: Presigned upload URL generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignUploadResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/images:
    post:
      summary: Add an image to a project
      description: Add a new image to a project.
      tags:
        - Images
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImageRequest"
      responses:
        "201":
          description: The created image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/images/{id}:
    get:
      summary: Get an image by ID
      description:
        Retrieve a specific image by its ID. The image must belong to the
        authenticated user.
      tags:
        - Images
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the image
          schema:
            type: string
            format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
      responses:
        "200":
          description: The image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete an image
      description: Delete an image. The image must belong to the authenticated user.
      tags:
        - Images
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the image
          schema:
            type: string
            format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
      responses:
        "204":
          description: Image successfully deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/projects/{project_id}/images:
    get:
      summary: Get all images for a project
      description: Retrieve a list of images associated with a specific project.
      tags:
        - Images
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "200":
          description: A list of images
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      $ref: "#/components/schemas/Image"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/events:
    get:
      summary: Server-Sent Events for real-time updates
      description: Stream job and image status updates for the authenticated user.
      tags:
        - Events
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Event stream established
          content:
            text/event-stream:
              schema:
                type: string
                example: |
                  event: message
                  data: {"type":"job_update","status":"processing","image_id":"a1b2c3"}
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/uploads:
    post:
      summary: Upload a file to S3 via presigned request
      description: Securely upload files directly to S3 using a presigned URL.
      tags:
        - Uploads
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
      responses:
        "200":
          description: Presigned upload information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignUploadResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/health:
    get:
      summary: Health check endpoint
      description: Returns status of the API service.
      tags:
        - Health
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                    example: virtual-staging-api
  /v1/billing/subscriptions:
    get:
      summary: List current user's subscriptions
      description: Retrieve all subscriptions associated with the authenticated user.
      tags:
        - Billing
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of subscriptions to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of subscriptions to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: A list of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subscription"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v1/billing/invoices:
    get:
      summary: List current user's invoices
      description: Retrieve all invoices associated with the authenticated user.
      tags:
        - Billing
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of invoices to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of invoices to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: A list of invoices
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Invoice"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Authentication is required to access this resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequestError:
      description: The request could not be understood due to malformed syntax
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ValidationError:
      description: The request validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
    InternalServerError:
      description: The server encountered an unexpected condition
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: bad_request
        message:
          type: string
          example: Invalid request format
    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: validation_error
        message:
          type: string
          example: One or more fields failed validation
        validation_errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationErrorDetail"
    ValidationErrorDetail:
      type: object
      properties:
        field:
          type: string
          example: name
        message:
          type: string
          example: must not be empty
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        user_id:
          type: string
          example: auth0|123456789
        name:
          type: string
          example: Living Room Staging
        description:
          type: string
          example: Staging for the living room with modern style
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: New Project
        description:
          type: string
          example: A description of the project
    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: Updated Project Name
        description:
          type: string
          example: Updated description of the project
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        project_id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        original_url:
          type: string
          example: https://s3.amazonaws.com/bucket/original.jpg
        staged_url:
          type: string
          example: https://s3.amazonaws.com/bucket/staged.jpg
        status:
          type: string
          enum: [queued, processing, ready, failed]
          example: ready
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateImageRequest:
      type: object
      required:
        - project_id
        - original_url
      properties:
        project_id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        original_url:
          type: string
          example: https://s3.amazonaws.com/bucket/original.jpg
        style:
          type: string
          example: modern
    PresignUploadRequest:
      type: object
      required:
        - filename
        - content_type
      properties:
        filename:
          type: string
          example: photo.jpg
        content_type:
          type: string
          example: image/jpeg
    PresignUploadResponse:
      type: object
      properties:
        url:
          type: string
          example: https://s3.amazonaws.com/presigned-url
        fields:
          type: object
          additionalProperties:
            type: string
          example:
            key: uploads/photo.jpg
            policy: eyJleHBpcmF0aW9uIjoiMjAyMy0wMS0wMVQwMDowMDowMFoiLCJjb25kaXRpb25zIjpbeyJidWNrZXQiOiJteS1idWNrZXQifSxbInN0YXJ0cy13aXRoIiwiJEtleSIsInVwbG9hZHMvIl1dfQ==
            x-amz-algorithm: AWS4-HMAC-SHA256
            x-amz-credential: AKIAIOSFODNN7EXAMPLE/20230101/us-west-1/s3/aws4_request
            x-amz-date: 20230101T000000Z
            x-amz-signature: 4a9c8b...
    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        plan:
          type: string
          example: pro
        status:
          type: string
          example: active
        started_at:
          type: string
          format: date-time
        current_period_end:
          type: string
          format: date-time
    Invoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        amount_due:
          type: number
          format: float
          example: 49.99
        currency:
          type: string
          example: USD
        status:
          type: string
          example: paid
        due_date:
          type: string
          format: date-time
