openapi: 3.1.0
info:
  title: Virtual Staging AI API
  description: |
    API for the Virtual Staging AI application.
    
    ## Authentication
    
    This API uses **OAuth 2.0 / OpenID Connect** via Auth0 for authentication.
    All protected endpoints require a valid JWT access token in the `Authorization` header.
    
    ### Obtaining an Access Token
    
    **For Web Applications:**
    - Use the Auth0 Next.js SDK (`@auth0/nextjs-auth0`)
    - Tokens are automatically managed via encrypted session cookies
    - Access tokens obtained from `/auth/access-token` endpoint
    
    **For Testing:**
    - Use the `make token` command to generate a test token
    - Or authenticate via Auth0 Universal Login in the web UI
    
    ### Token Format
    
    Access tokens are JWTs signed by Auth0 with the following claims:
    - `iss`: Auth0 domain (e.g., `https://dev-sleeping-pandas.us.auth0.com/`)
    - `sub`: User ID (e.g., `auth0|123456789`)
    - `aud`: API audience (e.g., `https://api.virtualstaging.local`)
    - `exp`: Expiration timestamp
    - `iat`: Issued at timestamp
    - `scope`: OAuth scopes (e.g., `openid profile email`)
    
    ### Using the Access Token
    
    Include the token in the `Authorization` header:
    ```
    Authorization: Bearer <access_token>
    ```
    
    **Note:** The `/api/v1/events` SSE endpoint also accepts tokens via the `access_token` query parameter
    since EventSource doesn't support custom headers.
    
    ## Rate Limiting
    
    Rate limits may apply to prevent abuse. Check response headers for limit information.
    
    ## Versioning
    
    This API is versioned via the URL path (`/api/v1/`). Breaking changes will result in a new version.
  version: 0.1.0
servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.virtualstaging.ai
    description: Production server
paths:
  /api/v1/projects:
    get:
      summary: Get all projects for the authenticated user
      description:
        Retrieve a list of all projects belonging to the authenticated
        user
      tags:
        - Projects
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new project
      description: Create a new project for the authenticated user
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: The created project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/projects/{id}:
    get:
      summary: Get a project by ID
      description:
        Retrieve a specific project by its ID. The project must belong
        to the authenticated user.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "200":
          description: The project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update a project
      description:
        Update an existing project. The project must belong to the authenticated
        user.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
      responses:
        "200":
          description: The updated project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a project
      description:
        Delete a project and all associated data. The project must belong
        to the authenticated user.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "204":
          description: Project successfully deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/uploads/presign:
    post:
      summary: Generate presigned URL for file upload
      description: Generate a presigned URL that allows direct upload to S3 storage
      tags:
        - Uploads
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PresignUploadRequest"
      responses:
        "200":
          description: Presigned upload URL generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignUploadResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/images:
    post:
      summary: Add an image to a project
      description: Add a new image to a project.
      tags:
        - Images
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImageRequest"
      responses:
        "201":
          description: The created image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/images/{id}:
    get:
      summary: Get an image by ID
      description:
        Retrieve a specific image by its ID. The image must belong to the
        authenticated user.
      tags:
        - Images
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the image
          schema:
            type: string
            format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
      responses:
        "200":
          description: The image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete an image
      description: Delete an image. The image must belong to the authenticated user.
      tags:
        - Images
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the image
          schema:
            type: string
            format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
      responses:
        "204":
          description: Image successfully deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/projects/{project_id}/images:
    get:
      summary: Get all images for a project
      description: Retrieve a list of images associated with a specific project.
      tags:
        - Images
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          description: The unique identifier of the project
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        "200":
          description: A list of images
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      $ref: "#/components/schemas/Image"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/events:
    get:
      summary: Server-Sent Events for real-time updates
      description: |
        Stream job and image status updates for the authenticated user via Server-Sent Events (SSE).
        
        **Authentication:** This endpoint supports two authentication methods:
        1. Standard `Authorization: Bearer <token>` header (recommended)
        2. Query parameter `access_token=<token>` (for EventSource compatibility)
        
        The query parameter method exists because the browser EventSource API doesn't support
        custom headers. Web applications should fetch the access token from `/auth/access-token`
        and append it to the URL.
        
        **Event Types:**
        - `connected`: Initial connection confirmation
        - `heartbeat`: Keep-alive ping (every 30 seconds)
        - `job_update`: Image processing status update
        
        **Example Usage:**
        ```javascript
        const response = await fetch('/auth/access-token');
        const { accessToken } = await response.json();
        const url = `/api/v1/events?image_id=${imageId}&access_token=${accessToken}`;
        const eventSource = new EventSource(url);
        
        eventSource.addEventListener('job_update', (event) => {
          const data = JSON.parse(event.data);
          console.log('Status:', data.status);
        });
        ```
      tags:
        - Events
      security:
        - bearerAuth: []
        - queryToken: []
      parameters:
        - name: image_id
          in: query
          required: true
          description: The image identifier to subscribe to
          schema:
            type: string
            format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        - name: access_token
          in: query
          required: false
          description: |
            Access token for authentication (alternative to Authorization header).
            Use this when the client (e.g., EventSource) cannot set custom headers.
          schema:
            type: string
      responses:
        "200":
          description: Event stream established
          content:
            text/event-stream:
              schema:
                type: string
                example: |
                  event: connected
                  data: {"message":"Connected to image stream"}

                  event: heartbeat
                  data: {"timestamp":1700000000}

                  event: job_update
                  data: {"status":"processing"}
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          description: Pub/Sub not configured or unavailable
  /health:
    get:
      summary: Health check endpoint
      description: Returns status of the API service.
      tags:
        - Health
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                    example: virtual-staging-api
  /api/v1/images/{id}/presign:
    get:
      summary: Generate presigned download URL for an image
      description: Returns a browser-accessible presigned URL for the image's original or staged file.
      tags:
        - Images
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the image
          schema:
            type: string
            format: uuid
        - name: kind
          in: query
          required: false
          description: Which file to presign
          schema:
            type: string
            enum: [original, staged]
            default: original
        - name: expires_in
          in: query
          required: false
          description: URL expiration in seconds (default 600)
          schema:
            type: integer
        - name: download
          in: query
          required: false
          description: Set to 1 to force Content-Disposition=attachment
          schema:
            type: integer
            enum: [0, 1]
      responses:
        "200":
          description: Presigned URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/stripe/webhook:
    post:
      summary: Stripe webhook endpoint
      description: Receives Stripe events. Verifies signature and processes events idempotently.
      tags:
        - Stripe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Event received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: received
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "503":
          description: Webhook secret not configured
  /api/v1/billing/subscriptions:
    get:
      summary: List current user's subscriptions
      description: Retrieve all subscriptions associated with the authenticated user.
      tags:
        - Billing
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of subscriptions to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of subscriptions to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: A list of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subscription"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/v1/billing/invoices:
    get:
      summary: List current user's invoices
      description: Retrieve all invoices associated with the authenticated user.
      tags:
        - Billing
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of invoices to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of invoices to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: A list of invoices
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Invoice"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT access token issued by Auth0.
        
        **How to obtain:**
        - Web app: Use Auth0 SDK, fetch from `/auth/access-token` endpoint
        - Testing: Run `make token` command
        - Direct: Authenticate via Auth0 Universal Login
        
        **Token claims:**
        - `sub`: User ID (used to identify the authenticated user)
        - `aud`: Must match `https://api.virtualstaging.local`
        - `iss`: Auth0 domain
        - `exp`: Expiration (tokens typically valid for 1 hour)
        
        **Usage:**
        ```
        Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        ```
    queryToken:
      type: apiKey
      in: query
      name: access_token
      description: |
        Alternative authentication method using query parameter.
        Only supported for `/api/v1/events` SSE endpoint due to EventSource limitations.
        
        **Usage:**
        ```
        GET /api/v1/events?image_id=<uuid>&access_token=<token>
        ```
  responses:
    UnauthorizedError:
      description: |
        Authentication is required to access this resource.
        
        **Common causes:**
        - Missing `Authorization` header
        - Invalid or expired JWT token
        - Token not signed by Auth0
        - Token audience doesn't match API audience
        - User doesn't have permission to access resource
        
        **Resolution:**
        - Ensure you're sending `Authorization: Bearer <token>` header
        - Verify token is not expired (check `exp` claim)
        - Obtain a fresh token if needed
        - For SSE endpoint: check `access_token` query parameter
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: unauthorized
            message: "Authentication required"
    BadRequestError:
      description: The request could not be understood due to malformed syntax
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ValidationError:
      description: The request validation failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"
    InternalServerError:
      description: The server encountered an unexpected condition
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: bad_request
        message:
          type: string
          example: Invalid request format
    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: validation_error
        message:
          type: string
          example: One or more fields failed validation
        validation_errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationErrorDetail"
    ValidationErrorDetail:
      type: object
      properties:
        field:
          type: string
          example: name
        message:
          type: string
          example: must not be empty
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        user_id:
          type: string
          example: auth0|123456789
        name:
          type: string
          example: Living Room Staging
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: New Project
    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: Updated Project Name
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        project_id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        original_url:
          type: string
          example: https://s3.amazonaws.com/bucket/original.jpg
        staged_url:
          type: string
          example: https://s3.amazonaws.com/bucket/staged.jpg
        room_type:
          type: string
          example: living_room
        style:
          type: string
          example: modern
        seed:
          type: integer
          format: int64
          example: 123
        status:
          type: string
          enum: [queued, processing, ready, error]
          example: ready
        error:
          type: string
          example: failed to process image
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CreateImageRequest:
      type: object
      required:
        - project_id
        - original_url
      properties:
        project_id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        original_url:
          type: string
          example: https://s3.amazonaws.com/bucket/original.jpg
        room_type:
          type: string
          example: living_room
        style:
          type: string
          example: modern
        seed:
          type: integer
          format: int64
    PresignUploadRequest:
      type: object
      required:
        - filename
        - content_type
        - file_size
      properties:
        filename:
          type: string
          example: photo.jpg
        content_type:
          type: string
          example: image/jpeg
        file_size:
          type: integer
          format: int64
          example: 1048576
    PresignUploadResponse:
      type: object
      properties:
        upload_url:
          type: string
          example: https://s3.amazonaws.com/presigned-put-url
        file_key:
          type: string
          example: uploads/user-123/photo-uuid.jpg
        expires_in:
          type: integer
          example: 900
    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        plan:
          type: string
          example: pro
        status:
          type: string
          example: active
        started_at:
          type: string
          format: date-time
        current_period_end:
          type: string
          format: date-time
    Invoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        amount_due:
          type: number
          format: float
          example: 49.99
        currency:
          type: string
          example: USD
        status:
          type: string
          example: paid
        due_date:
          type: string
          format: date-time
